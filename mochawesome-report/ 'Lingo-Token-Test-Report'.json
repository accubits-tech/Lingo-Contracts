{
  "stats": {
    "suites": 25,
    "tests": 121,
    "passes": 121,
    "pending": 0,
    "failures": 0,
    "start": "2023-04-13T06:10:08.845Z",
    "end": "2023-04-13T06:10:35.523Z",
    "duration": 26678,
    "testsRegistered": 121,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9b6ae41b-b1d4-4c1b-8a53-b31f756ab984",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ed24acf3-bd22-4e0b-84c0-f4094a8758de",
          "title": "Distribution Contract",
          "fullFile": "C:\\Users\\prasa\\Documents\\CODE\\Accubits\\lingo-token\\test\\distributionContract.js",
          "file": "\\test\\distributionContract.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Distribution Contract\"",
              "fullTitle": "Distribution Contract \"before each\" hook in \"Distribution Contract\"",
              "timedOut": false,
              "duration": 163,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await reset();\n[owner, user1, user2, user3, treasuryWallet] = await ethers.getSigners();\nconst Token = await ethers.getContractFactory('LINGO');\nconst Distribution = await ethers.getContractFactory('Distribution');\ntoken = await Token.deploy(\n  NAME,\n  SYMBOL,\n  TOTAL_SUPPLY_BN,\n  owner.address,\n  treasuryWallet.address,\n  FEE_BN\n);\ndistributionContract = await Distribution.deploy(\n  owner.address,\n  treasuryWallet.address,\n  token.address,\n  SLOT_BN,\n  ADMIN_CLAIM_PERIOD_BN,\n  WITHDRAWAL_FEE_BN\n);\ntoken.addToWhiteList(0, [distributionContract.address]);",
              "err": {},
              "uuid": "55b7f860-7b72-44ba-88a7-c2febb0658f8",
              "parentUUID": "ed24acf3-bd22-4e0b-84c0-f4094a8758de",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3873a0cf-207b-45ee-8745-d373a0cf5aef",
              "title": "Deployment",
              "fullFile": "C:\\Users\\prasa\\Documents\\CODE\\Accubits\\lingo-token\\test\\distributionContract.js",
              "file": "\\test\\distributionContract.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Ownership transferred from deployer to owner",
                  "fullTitle": "Distribution Contract Deployment Ownership transferred from deployer to owner",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await distributionContract.owner();\nexpect(result).to.equal(owner.address);",
                  "err": {},
                  "uuid": "00d7b87c-f30c-49df-8a9b-7e0cc922fc7a",
                  "parentUUID": "3873a0cf-207b-45ee-8745-d373a0cf5aef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Distribution Contract is externally whitelisted",
                  "fullTitle": "Distribution Contract Deployment Distribution Contract is externally whitelisted",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await token.isExternalWhiteListed(distributionContract.address)).to.be.true;",
                  "err": {},
                  "uuid": "8b3264b5-e99e-4000-a035-fcd1d20304d1",
                  "parentUUID": "3873a0cf-207b-45ee-8745-d373a0cf5aef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "00d7b87c-f30c-49df-8a9b-7e0cc922fc7a",
                "8b3264b5-e99e-4000-a035-fcd1d20304d1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 34,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "c59bdfba-46d0-4f7d-ab13-4146e7f8f13f",
              "title": "Withdrawal Fee",
              "fullFile": "C:\\Users\\prasa\\Documents\\CODE\\Accubits\\lingo-token\\test\\distributionContract.js",
              "file": "\\test\\distributionContract.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Anyone can read current fee percentage",
                  "fullTitle": "Distribution Contract Withdrawal Fee Anyone can read current fee percentage",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect((await distributionContract.getWithdrawalFee()).eq(WITHDRAWAL_FEE_BN)).is.true;",
                  "err": {},
                  "uuid": "02b10974-f596-4913-926c-b6e1cb1b3c4a",
                  "parentUUID": "c59bdfba-46d0-4f7d-ab13-4146e7f8f13f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Owner can update fee percentage",
                  "fullTitle": "Distribution Contract Withdrawal Fee Owner can update fee percentage",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect((await distributionContract.getWithdrawalFee()).eq(WITHDRAWAL_FEE_BN)).is.true;\nconst NEW_FEE = BN(200);\nawait distributionContract.setWithdrawalFee(NEW_FEE);\nexpect((await distributionContract.getWithdrawalFee()).eq(NEW_FEE)).is.true;",
                  "err": {},
                  "uuid": "b81cf8f9-66b4-4a50-b923-8f67c487fd7d",
                  "parentUUID": "c59bdfba-46d0-4f7d-ab13-4146e7f8f13f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Event emitted when fee percentage updated",
                  "fullTitle": "Distribution Contract Withdrawal Fee Event emitted when fee percentage updated",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const NEW_FEE = BN(200);\nawait expect(distributionContract.setWithdrawalFee(NEW_FEE))\n  .to.emit(distributionContract, 'WithdrawalFeeUpdated')\n  .withArgs(NEW_FEE);",
                  "err": {},
                  "uuid": "772c16f9-6707-4685-937b-70739748c8ad",
                  "parentUUID": "c59bdfba-46d0-4f7d-ab13-4146e7f8f13f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts when non owner tries to update fee percentage",
                  "fullTitle": "Distribution Contract Withdrawal Fee Reverts when non owner tries to update fee percentage",
                  "timedOut": false,
                  "duration": 71,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const NEW_FEE = BN(200);\nawait expect(\n  distributionContract.connect(user1).setWithdrawalFee(NEW_FEE)\n).to.be.revertedWith('Ownable: caller is not the owner');",
                  "err": {},
                  "uuid": "ee6e4c80-2a9b-416d-94bc-093a69af4c20",
                  "parentUUID": "c59bdfba-46d0-4f7d-ab13-4146e7f8f13f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts when tries to update fee percentage outside the limit 0% - 5%",
                  "fullTitle": "Distribution Contract Withdrawal Fee Reverts when tries to update fee percentage outside the limit 0% - 5%",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const NEW_FEE = BN(600);\nawait expect(distributionContract.setWithdrawalFee(NEW_FEE)).to.be.revertedWith(\n  'LINGO: Withdrawal Fee should be between 0% - 5%'\n);",
                  "err": {},
                  "uuid": "d1122c12-5d31-4469-8537-b979bdde8a97",
                  "parentUUID": "c59bdfba-46d0-4f7d-ab13-4146e7f8f13f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "02b10974-f596-4913-926c-b6e1cb1b3c4a",
                "b81cf8f9-66b4-4a50-b923-8f67c487fd7d",
                "772c16f9-6707-4685-937b-70739748c8ad",
                "ee6e4c80-2a9b-416d-94bc-093a69af4c20",
                "d1122c12-5d31-4469-8537-b979bdde8a97"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 159,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "86bf8f1c-8e6e-4aa8-af67-319ea5671dc5",
              "title": "Treasury Wallet",
              "fullFile": "C:\\Users\\prasa\\Documents\\CODE\\Accubits\\lingo-token\\test\\distributionContract.js",
              "file": "\\test\\distributionContract.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Any one can read current treasury wallet",
                  "fullTitle": "Distribution Contract Treasury Wallet Any one can read current treasury wallet",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await distributionContract.connect(user1).getTreasuryWalletAddress()).equals(\n  treasuryWallet.address\n);",
                  "err": {},
                  "uuid": "0ddcc0af-fba6-45fa-96b6-7ace16fa40ff",
                  "parentUUID": "86bf8f1c-8e6e-4aa8-af67-319ea5671dc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Owner can update treasury wallet",
                  "fullTitle": "Distribution Contract Treasury Wallet Owner can update treasury wallet",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await distributionContract.setTreasuryWalletAddress(user3.address);\nexpect(await distributionContract.getTreasuryWalletAddress()).equals(user3.address);",
                  "err": {},
                  "uuid": "769e08ed-bb17-4628-9ee7-14b8de74f68c",
                  "parentUUID": "86bf8f1c-8e6e-4aa8-af67-319ea5671dc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Event emitted when treasury wallet updated",
                  "fullTitle": "Distribution Contract Treasury Wallet Event emitted when treasury wallet updated",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await expect(distributionContract.setTreasuryWalletAddress(user3.address))\n  .to.emit(distributionContract, 'TreasuryWalletUpdated')\n  .withArgs(user3.address);",
                  "err": {},
                  "uuid": "7fc51c93-99d5-4a90-8e16-518b14cde106",
                  "parentUUID": "86bf8f1c-8e6e-4aa8-af67-319ea5671dc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts when non owner tries to update treasury wallet",
                  "fullTitle": "Distribution Contract Treasury Wallet Reverts when non owner tries to update treasury wallet",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await expect(\n  distributionContract.connect(user1).setTreasuryWalletAddress(user3.address)\n).to.be.revertedWith('Ownable: caller is not the owner');",
                  "err": {},
                  "uuid": "3987dca9-f353-41b0-934f-16193fee2c64",
                  "parentUUID": "86bf8f1c-8e6e-4aa8-af67-319ea5671dc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts when owner tries to update treasury wallet with zero address",
                  "fullTitle": "Distribution Contract Treasury Wallet Reverts when owner tries to update treasury wallet with zero address",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await expect(distributionContract.setTreasuryWalletAddress(ZERO_ADDRESS)).to.be.revertedWith(\n  'LINGO: Zero Address'\n);",
                  "err": {},
                  "uuid": "3d262096-2308-4308-878f-8cf403abf956",
                  "parentUUID": "86bf8f1c-8e6e-4aa8-af67-319ea5671dc5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0ddcc0af-fba6-45fa-96b6-7ace16fa40ff",
                "769e08ed-bb17-4628-9ee7-14b8de74f68c",
                "7fc51c93-99d5-4a90-8e16-518b14cde106",
                "3987dca9-f353-41b0-934f-16193fee2c64",
                "3d262096-2308-4308-878f-8cf403abf956"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 119,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "c982f18e-646b-48be-8a58-de25a17be18f",
              "title": "Slot",
              "fullFile": "C:\\Users\\prasa\\Documents\\CODE\\Accubits\\lingo-token\\test\\distributionContract.js",
              "file": "\\test\\distributionContract.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Anyone can read current slot",
                  "fullTitle": "Distribution Contract Slot Anyone can read current slot",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect((await distributionContract.getSlot()).eq(SLOT_BN)).is.true;",
                  "err": {},
                  "uuid": "7ff05c32-b7cd-480b-a226-33a76ceac580",
                  "parentUUID": "c982f18e-646b-48be-8a58-de25a17be18f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Owner can update slot",
                  "fullTitle": "Distribution Contract Slot Owner can update slot",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect((await distributionContract.getSlot()).eq(SLOT_BN)).is.true;\nconst NEW_SLOT = BN(10 * 24);\nawait distributionContract.updateSlot(NEW_SLOT);\nexpect((await distributionContract.getSlot()).eq(NEW_SLOT)).is.true;",
                  "err": {},
                  "uuid": "6a82b3b4-7534-4b59-a2a9-473a23757994",
                  "parentUUID": "c982f18e-646b-48be-8a58-de25a17be18f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Event emitted when slot updated",
                  "fullTitle": "Distribution Contract Slot Event emitted when slot updated",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const NEW_SLOT = BN(10 * 24);\nawait expect(distributionContract.updateSlot(NEW_SLOT))\n  .to.emit(distributionContract, 'SlotUpdated')\n  .withArgs(NEW_SLOT);",
                  "err": {},
                  "uuid": "45bad1f7-16fa-45d5-b6bd-971bc08ba732",
                  "parentUUID": "c982f18e-646b-48be-8a58-de25a17be18f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts when non owner tries to update slot",
                  "fullTitle": "Distribution Contract Slot Reverts when non owner tries to update slot",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const NEW_SLOT = BN(10 * 24);\nawait expect(distributionContract.connect(user1).updateSlot(NEW_SLOT)).to.be.revertedWith(\n  'Ownable: caller is not the owner'\n);",
                  "err": {},
                  "uuid": "f64eea04-9c2f-410e-a0ee-d97f78434f32",
                  "parentUUID": "c982f18e-646b-48be-8a58-de25a17be18f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts when tries to update slot with zero",
                  "fullTitle": "Distribution Contract Slot Reverts when tries to update slot with zero",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const NEW_SLOT = BN(0);\nawait expect(distributionContract.updateSlot(NEW_SLOT)).to.be.revertedWith(\n  'LINGO: Slot cannot be zero'\n);",
                  "err": {},
                  "uuid": "88c2f3a8-b837-429a-b888-8a70defe06e1",
                  "parentUUID": "c982f18e-646b-48be-8a58-de25a17be18f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7ff05c32-b7cd-480b-a226-33a76ceac580",
                "6a82b3b4-7534-4b59-a2a9-473a23757994",
                "45bad1f7-16fa-45d5-b6bd-971bc08ba732",
                "f64eea04-9c2f-410e-a0ee-d97f78434f32",
                "88c2f3a8-b837-429a-b888-8a70defe06e1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 58,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "e6eeeaea-9038-4b72-9520-dacdbc51e918",
              "title": "Admin Claim Period",
              "fullFile": "C:\\Users\\prasa\\Documents\\CODE\\Accubits\\lingo-token\\test\\distributionContract.js",
              "file": "\\test\\distributionContract.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Anyone can read admin claim period",
                  "fullTitle": "Distribution Contract Admin Claim Period Anyone can read admin claim period",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect((await distributionContract.getAdminClaimPeriod()).eq(ADMIN_CLAIM_PERIOD_BN)).is.true;",
                  "err": {},
                  "uuid": "dbd3a8e0-e9ec-48a7-b65c-fce4b7c153d8",
                  "parentUUID": "e6eeeaea-9038-4b72-9520-dacdbc51e918",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Owner can update admin claim period",
                  "fullTitle": "Distribution Contract Admin Claim Period Owner can update admin claim period",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect((await distributionContract.getAdminClaimPeriod()).eq(ADMIN_CLAIM_PERIOD_BN)).is.true;\nconst NEW_PERIOD = BN(6 * 30 * 24);\nawait distributionContract.updateAdminClaimPeriod(NEW_PERIOD);\nexpect((await distributionContract.getAdminClaimPeriod()).eq(NEW_PERIOD)).is.true;",
                  "err": {},
                  "uuid": "feef2cc2-f434-4807-8468-dffaa7a86811",
                  "parentUUID": "e6eeeaea-9038-4b72-9520-dacdbc51e918",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Event emitted when slot updated",
                  "fullTitle": "Distribution Contract Admin Claim Period Event emitted when slot updated",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const NEW_PERIOD = BN(6 * 30 * 24);\nawait expect(distributionContract.updateAdminClaimPeriod(NEW_PERIOD))\n  .to.emit(distributionContract, 'AdminClaimPeriodUpdated')\n  .withArgs(NEW_PERIOD);",
                  "err": {},
                  "uuid": "fe528a43-793c-4c15-b2cf-0f9fd44d4f9c",
                  "parentUUID": "e6eeeaea-9038-4b72-9520-dacdbc51e918",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts when non owner tries to update slot",
                  "fullTitle": "Distribution Contract Admin Claim Period Reverts when non owner tries to update slot",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const NEW_PERIOD = BN(6 * 30 * 24);\nawait expect(\n  distributionContract.connect(user1).updateAdminClaimPeriod(NEW_PERIOD)\n).to.be.revertedWith('Ownable: caller is not the owner');",
                  "err": {},
                  "uuid": "6563e0c2-a83a-4e8a-812b-065cdce69b97",
                  "parentUUID": "e6eeeaea-9038-4b72-9520-dacdbc51e918",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dbd3a8e0-e9ec-48a7-b65c-fce4b7c153d8",
                "feef2cc2-f434-4807-8468-dffaa7a86811",
                "fe528a43-793c-4c15-b2cf-0f9fd44d4f9c",
                "6563e0c2-a83a-4e8a-812b-065cdce69b97"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 49,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "8a4633d9-7108-4c1a-a6a3-8d913a7fc820",
              "title": "Contract Current State",
              "fullFile": "C:\\Users\\prasa\\Documents\\CODE\\Accubits\\lingo-token\\test\\distributionContract.js",
              "file": "\\test\\distributionContract.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Anyone can read current token address",
                  "fullTitle": "Distribution Contract Contract Current State Anyone can read current token address",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await distributionContract.getTokenAddress()).equal(token.address);",
                  "err": {},
                  "uuid": "a794aa6c-6001-4465-a469-024fa735a555",
                  "parentUUID": "8a4633d9-7108-4c1a-a6a3-8d913a7fc820",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Anyone can read current contract state",
                  "fullTitle": "Distribution Contract Contract Current State Anyone can read current contract state",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const state = await distributionContract.getContractState();\nconst currentEpochTimeInHoursBN = BN(Math.floor(Date.now() / 1000 / 3600));\nexpect(state.startTime.eq(currentEpochTimeInHoursBN)).is.true;\nexpect(state.endTime.eq(currentEpochTimeInHoursBN.add(SLOT_BN))).is.true;\nexpect(state.totalAmount.eq(BN(0))).is.true;\nexpect(state.totalCredits.eq(BN(0))).is.true;",
                  "err": {},
                  "uuid": "7b0acf4d-655c-4ea0-afd4-65a0c80599bd",
                  "parentUUID": "8a4633d9-7108-4c1a-a6a3-8d913a7fc820",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Anyone can read staked user address",
                  "fullTitle": "Distribution Contract Contract Current State Anyone can read staked user address",
                  "timedOut": false,
                  "duration": 263,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const balanceBN = BN(1000).mul(BN(10).pow(DECIMALS_BN));\nconst amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait initialFundAllocation(token, balanceBN);\nawait deposit(distributionContract, token, user1, amountBN);\nawait deposit(distributionContract, token, user2, amountBN);\nawait deposit(distributionContract, token, user3, amountBN);\nconst stakedUsers = await distributionContract.getUserAddresses();\nexpect(_.isEqual(stakedUsers, [user1.address, user2.address, user3.address])).is.true;",
                  "err": {},
                  "uuid": "2a74356f-562f-49ea-9962-ade79970f488",
                  "parentUUID": "8a4633d9-7108-4c1a-a6a3-8d913a7fc820",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Anyone can read current user status",
                  "fullTitle": "Distribution Contract Contract Current State Anyone can read current user status",
                  "timedOut": false,
                  "duration": 112,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const balanceBN = BN(1000).mul(BN(10).pow(DECIMALS_BN));\nconst amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait initialFundAllocation(token, balanceBN);\nawait deposit(distributionContract, token, user1, amountBN);\nconst userStatus = await distributionContract.getUserStatus(user1.address);\nconst currentEpochTimeInHoursBN = BN(Math.floor(Date.now() / 1000 / 3600));\nexpect(userStatus.balance.eq(amountBN)).is.true;\nexpect(userStatus.forecastedCredits.eq(amountBN.mul(SLOT_BN))).is.true;\nexpect(userStatus.lastUpdatedTimestamp.eq(currentEpochTimeInHoursBN)).is.true;\nexpect(userStatus.lastClaimedTimestamp.eq(currentEpochTimeInHoursBN)).is.true;",
                  "err": {},
                  "uuid": "de3e4347-1d33-4bb4-8723-0e5342631b6b",
                  "parentUUID": "8a4633d9-7108-4c1a-a6a3-8d913a7fc820",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Anyone can read distribution history",
                  "fullTitle": "Distribution Contract Contract Current State Anyone can read distribution history",
                  "timedOut": false,
                  "duration": 61,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const balanceBN = BN(1000).mul(BN(10).pow(DECIMALS_BN));\nconst amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait initialFundAllocation(token, balanceBN);\nawait skipTime(BN(SLOT_BN).mul(BN(3600)).add(BN(3600)).toNumber());\nawait distribute(distributionContract, token, amountBN);\nconst currentEpochTimeInHoursBN = BN(Math.floor(Date.now() / 1000 / 3600));\nconst distributionHistory = await distributionContract.getDistributionHistory();\nexpect(distributionHistory.length > 0).is.true;\nexpect(distributionHistory[0].startTime.eq(currentEpochTimeInHoursBN)).is.true;\nexpect(distributionHistory[0].endTime.eq(currentEpochTimeInHoursBN.add(SLOT_BN))).is.true;\nexpect(distributionHistory[0].monthlyProfit.eq(amountBN)).is.true;\nexpect(distributionHistory[0].totalCredits.eq(BN(0))).is.true;\nexpect(distributionHistory[0].remainingTokensToClaim.eq(amountBN)).is.true;",
                  "err": {},
                  "uuid": "168d0d04-c250-4651-b847-3dfdb1547112",
                  "parentUUID": "8a4633d9-7108-4c1a-a6a3-8d913a7fc820",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a794aa6c-6001-4465-a469-024fa735a555",
                "7b0acf4d-655c-4ea0-afd4-65a0c80599bd",
                "2a74356f-562f-49ea-9962-ade79970f488",
                "de3e4347-1d33-4bb4-8723-0e5342631b6b",
                "168d0d04-c250-4651-b847-3dfdb1547112"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 451,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "bb9c745c-ea7b-4fbd-a72e-c79836dd76d6",
              "title": "Deposit",
              "fullFile": "C:\\Users\\prasa\\Documents\\CODE\\Accubits\\lingo-token\\test\\distributionContract.js",
              "file": "\\test\\distributionContract.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Deposit\"",
                  "fullTitle": "Distribution Contract Deposit \"before each\" hook in \"Deposit\"",
                  "timedOut": false,
                  "duration": 31,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const balanceBN = BN(1000).mul(BN(10).pow(DECIMALS_BN));\nawait initialFundAllocation(token, balanceBN);",
                  "err": {},
                  "uuid": "93487e8e-21c1-4fb1-9c70-99a06f4f0813",
                  "parentUUID": "bb9c745c-ea7b-4fbd-a72e-c79836dd76d6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Any user with enough token balance can deposit any amount of tokens to the contract ",
                  "fullTitle": "Distribution Contract Deposit Any user with enough token balance can deposit any amount of tokens to the contract ",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nconst balance = await token.balanceOf(user1.address);\nawait deposit(distributionContract, token, user1, amountBN);\nconst userStatus = await distributionContract.getUserStatus(user1.address);\nconst currentEpochTimeInHoursBN = BN(Math.floor(Date.now() / 1000 / 3600));\nexpect((await token.balanceOf(user1.address)).eq(balance.sub(amountBN))).is.true;\nexpect(userStatus.balance.eq(amountBN)).is.true;\nexpect(userStatus.forecastedCredits.eq(amountBN.mul(SLOT_BN))).is.true;\nexpect(userStatus.lastUpdatedTimestamp.eq(currentEpochTimeInHoursBN)).is.true;\nexpect(userStatus.lastClaimedTimestamp.eq(currentEpochTimeInHoursBN)).is.true;",
                  "err": {},
                  "uuid": "caded493-2c0f-4e5a-b202-e69be274a71f",
                  "parentUUID": "bb9c745c-ea7b-4fbd-a72e-c79836dd76d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Multiple users can deposit ",
                  "fullTitle": "Distribution Contract Deposit Multiple users can deposit ",
                  "timedOut": false,
                  "duration": 172,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const currentEpochTimeInHoursBN = BN(Math.floor(Date.now() / 1000 / 3600));\nconst amountBN1 = BN(100).mul(BN(10).pow(DECIMALS_BN));\nconst amountBN2 = BN(50).mul(BN(10).pow(DECIMALS_BN));\nlet user1Status = await distributionContract.getUserStatus(user1.address);\nlet user2Status = await distributionContract.getUserStatus(user2.address);\nconst expectedCredits1 = await forecastCredits(\n  distributionContract,\n  user1Status,\n  amountBN1,\n  currentEpochTimeInHoursBN,\n  operation.deposit\n);\nconst expectedCredits2 = await forecastCredits(\n  distributionContract,\n  user2Status,\n  amountBN2,\n  currentEpochTimeInHoursBN,\n  operation.deposit\n);\nawait deposit(distributionContract, token, user1, amountBN1);\nawait deposit(distributionContract, token, user2, amountBN2);\nuser1Status = await distributionContract.getUserStatus(user1.address);\nuser2Status = await distributionContract.getUserStatus(user2.address);\nexpect(user1Status.balance.eq(amountBN1)).is.true;\nexpect(user1Status.forecastedCredits.eq(expectedCredits1)).is.true;\nexpect(user2Status.balance.eq(amountBN2)).is.true;\nexpect(user2Status.forecastedCredits.eq(expectedCredits2)).is.true;",
                  "err": {},
                  "uuid": "8df69323-21a5-4648-90ad-622a8d6a7c3d",
                  "parentUUID": "bb9c745c-ea7b-4fbd-a72e-c79836dd76d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "On deposit contract state changes ",
                  "fullTitle": "Distribution Contract Deposit On deposit contract state changes ",
                  "timedOut": false,
                  "duration": 155,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN1 = BN(100).mul(BN(10).pow(DECIMALS_BN));\nconst amountBN2 = BN(50).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN1);\nawait deposit(distributionContract, token, user2, amountBN2);\nconst user1Status = await distributionContract.getUserStatus(user1.address);\nconst user2Status = await distributionContract.getUserStatus(user2.address);\nexpect(user1Status.balance.eq(amountBN1)).is.true;\nexpect(user1Status.forecastedCredits.eq(amountBN1.mul(SLOT_BN))).is.true;\nexpect(user2Status.balance.eq(amountBN2)).is.true;\nexpect(user2Status.forecastedCredits.eq(amountBN2.mul(SLOT_BN))).is.true;\nconst contractState = await distributionContract.getContractState();\nexpect(contractState.totalAmount.eq(amountBN1.add(amountBN2))).is.true;\nexpect(\n  contractState.totalCredits.eq(\n    user1Status.forecastedCredits.add(user2Status.forecastedCredits)\n  )\n).is.true;",
                  "err": {},
                  "uuid": "4febf4f0-4cfb-4376-903b-2b1a7a798d16",
                  "parentUUID": "bb9c745c-ea7b-4fbd-a72e-c79836dd76d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Users can deposit any amount at any time ",
                  "fullTitle": "Distribution Contract Deposit Users can deposit any amount at any time ",
                  "timedOut": false,
                  "duration": 166,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN);\nconst currentEpochTimeInHoursBN = BN(Math.floor(Date.now() / 1000 / 3600));\nconst userStatus = await distributionContract.getUserStatus(user1.address);\nexpect(userStatus.balance.eq(amountBN)).is.true;\nexpect(userStatus.forecastedCredits.eq(amountBN.mul(SLOT_BN))).is.true;\nexpect(userStatus.lastUpdatedTimestamp.eq(currentEpochTimeInHoursBN)).is.true;\nexpect(userStatus.lastClaimedTimestamp.eq(currentEpochTimeInHoursBN)).is.true;\nconst skippingTime = BN(10 * 24).mul(BN(3600));\nconst amountBN2 = BN(50).mul(BN(10).pow(DECIMALS_BN));\nconst epochTimeInHoursBN = BN(Math.floor(Date.now() / 1000 / 3600)).add(BN(10 * 24));\nconst expectedCredits = await forecastCredits(\n  distributionContract,\n  userStatus,\n  amountBN2,\n  epochTimeInHoursBN,\n  operation.deposit\n);\nawait skipTime(skippingTime.toNumber());\nawait deposit(distributionContract, token, user1, amountBN2);\nconst userStatus2 = await distributionContract.getUserStatus(user1.address);\nexpect(userStatus2.balance.eq(amountBN.add(amountBN2))).is.true;\nexpect(userStatus2.forecastedCredits.eq(expectedCredits)).is.true;\nexpect(userStatus2.lastUpdatedTimestamp.eq(epochTimeInHoursBN)).is.true;\nexpect(userStatus2.lastClaimedTimestamp.eq(currentEpochTimeInHoursBN)).is.true;",
                  "err": {},
                  "uuid": "a4d74abe-db6d-43ff-91a0-5846976a7f37",
                  "parentUUID": "bb9c745c-ea7b-4fbd-a72e-c79836dd76d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Event emitted when fund deposited",
                  "fullTitle": "Distribution Contract Deposit Event emitted when fund deposited",
                  "timedOut": false,
                  "duration": 64,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait token.connect(user1).approve(distributionContract.address, amountBN);\nawait expect(distributionContract.connect(user1).deposit(amountBN))\n  .to.emit(distributionContract, 'Deposit')\n  .withArgs(user1.address, amountBN);",
                  "err": {},
                  "uuid": "236f2e72-4935-4350-bbaf-9e4183345ec8",
                  "parentUUID": "bb9c745c-ea7b-4fbd-a72e-c79836dd76d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Add user to the staked users list",
                  "fullTitle": "Distribution Contract Deposit Add user to the staked users list",
                  "timedOut": false,
                  "duration": 52,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nconst initialList = await distributionContract.getUserAddresses();\nexpect(_.isEqual(initialList, [user1.address])).is.false;\nawait deposit(distributionContract, token, user1, amountBN);\nconst finalList = await distributionContract.getUserAddresses();\nexpect(_.isEqual(finalList, [user1.address])).is.true;",
                  "err": {},
                  "uuid": "fde8e346-63b7-41c6-aee9-7b52604a1386",
                  "parentUUID": "bb9c745c-ea7b-4fbd-a72e-c79836dd76d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts when tries to deposit zero amount",
                  "fullTitle": "Distribution Contract Deposit Reverts when tries to deposit zero amount",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN = BN(0);\nawait expect(distributionContract.connect(user1).deposit(amountBN)).to.be.revertedWith(\n  'LINGO: Amount cannot be zero'\n);",
                  "err": {},
                  "uuid": "b3044c1f-015e-44a1-9dda-1805e9e41545",
                  "parentUUID": "bb9c745c-ea7b-4fbd-a72e-c79836dd76d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts when tries to deposit without allowance",
                  "fullTitle": "Distribution Contract Deposit Reverts when tries to deposit without allowance",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait expect(distributionContract.connect(user1).deposit(amountBN)).to.be.revertedWith(\n  'LINGO: Insufficient allowance'\n);",
                  "err": {},
                  "uuid": "d8c8c2cc-8934-4998-9cbd-84914dec3a7a",
                  "parentUUID": "bb9c745c-ea7b-4fbd-a72e-c79836dd76d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts when staking is not active",
                  "fullTitle": "Distribution Contract Deposit Reverts when staking is not active",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await skipTime(BN(SLOT_BN).mul(BN(3600)).add(BN(3600)).toNumber());\nconst amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait expect(distributionContract.connect(user1).deposit(amountBN)).to.be.revertedWith(\n  'LINGO: Distribution is on hold. Please contact admin'\n);",
                  "err": {},
                  "uuid": "1983cd7a-4989-49d5-9554-0eb9135cb62d",
                  "parentUUID": "bb9c745c-ea7b-4fbd-a72e-c79836dd76d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts when user have unclaimed tokens",
                  "fullTitle": "Distribution Contract Deposit Reverts when user have unclaimed tokens",
                  "timedOut": false,
                  "duration": 38,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await skipTime(BN(SLOT_BN).mul(BN(3600)).add(BN(3600)).toNumber());\nconst distributionAmountBN = BN(1000).mul(BN(10).pow(DECIMALS_BN));\nawait distribute(distributionContract, token, distributionAmountBN);\nconst amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait expect(distributionContract.connect(user1).deposit(amountBN)).to.be.revertedWith(\n  'LINGO: User have unclaimed tokens. Please claim it before deposit or withdraw'\n);",
                  "err": {},
                  "uuid": "f4f34bb9-1340-46f4-8b8d-db4fe66e3105",
                  "parentUUID": "bb9c745c-ea7b-4fbd-a72e-c79836dd76d6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "caded493-2c0f-4e5a-b202-e69be274a71f",
                "8df69323-21a5-4648-90ad-622a8d6a7c3d",
                "4febf4f0-4cfb-4376-903b-2b1a7a798d16",
                "a4d74abe-db6d-43ff-91a0-5846976a7f37",
                "236f2e72-4935-4350-bbaf-9e4183345ec8",
                "fde8e346-63b7-41c6-aee9-7b52604a1386",
                "b3044c1f-015e-44a1-9dda-1805e9e41545",
                "d8c8c2cc-8934-4998-9cbd-84914dec3a7a",
                "1983cd7a-4989-49d5-9554-0eb9135cb62d",
                "f4f34bb9-1340-46f4-8b8d-db4fe66e3105"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 767,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "77587afe-2bbc-4e64-817c-4f9a2ed56955",
              "title": "Withdraw",
              "fullFile": "C:\\Users\\prasa\\Documents\\CODE\\Accubits\\lingo-token\\test\\distributionContract.js",
              "file": "\\test\\distributionContract.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Withdraw\"",
                  "fullTitle": "Distribution Contract Withdraw \"before each\" hook in \"Withdraw\"",
                  "timedOut": false,
                  "duration": 35,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const balanceBN = BN(1000).mul(BN(10).pow(DECIMALS_BN));\nawait initialFundAllocation(token, balanceBN);",
                  "err": {},
                  "uuid": "183102ce-81b8-489b-a9c7-aae867c13930",
                  "parentUUID": "77587afe-2bbc-4e64-817c-4f9a2ed56955",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Any active user can fully withdraw staked fund",
                  "fullTitle": "Distribution Contract Withdraw Any active user can fully withdraw staked fund",
                  "timedOut": false,
                  "duration": 141,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN);\nconst userStatus1 = await distributionContract.getUserStatus(user1.address);\nconst currentEpochTimeInHoursBN1 = BN(Math.floor(Date.now() / 1000 / 3600));\nexpect(userStatus1.balance.eq(amountBN)).is.true;\nexpect(userStatus1.forecastedCredits.eq(amountBN.mul(SLOT_BN))).is.true;\nexpect(userStatus1.lastUpdatedTimestamp.eq(currentEpochTimeInHoursBN1)).is.true;\nexpect(userStatus1.lastClaimedTimestamp.eq(currentEpochTimeInHoursBN1)).is.true;\nconst balance = await token.balanceOf(user1.address);\nawait withdraw(distributionContract, user1, amountBN);\nconst userStatus2 = await distributionContract.getUserStatus(user1.address);\nconst currentEpochTimeInHoursBN2 = BN(Math.floor(Date.now() / 1000 / 3600));\nconst expectedCredits = await forecastCredits(\n  distributionContract,\n  userStatus1,\n  amountBN,\n  currentEpochTimeInHoursBN2,\n  0\n);\nconst expectedAmount = await debitWithdrawalFee(token, distributionContract, amountBN);\nexpect((await token.balanceOf(user1.address)).eq(balance.add(expectedAmount))).is.true;\nexpect(userStatus2.balance.eq(BN(0))).is.true;\nexpect(userStatus2.forecastedCredits.eq(expectedCredits)).is.true;\nexpect(userStatus2.lastUpdatedTimestamp.eq(currentEpochTimeInHoursBN2)).is.true;\nexpect(userStatus2.lastClaimedTimestamp.eq(currentEpochTimeInHoursBN2)).is.true;",
                  "err": {},
                  "uuid": "b2e387af-f4d8-4562-8ae8-ef59c665edf5",
                  "parentUUID": "77587afe-2bbc-4e64-817c-4f9a2ed56955",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Any active user can partially withdraw staked fund",
                  "fullTitle": "Distribution Contract Withdraw Any active user can partially withdraw staked fund",
                  "timedOut": false,
                  "duration": 150,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN);\nconst userStatus1 = await distributionContract.getUserStatus(user1.address);\nconst currentEpochTimeInHoursBN1 = BN(Math.floor(Date.now() / 1000 / 3600));\nexpect(userStatus1.balance.eq(amountBN)).is.true;\nexpect(userStatus1.forecastedCredits.eq(amountBN.mul(SLOT_BN))).is.true;\nexpect(userStatus1.lastUpdatedTimestamp.eq(currentEpochTimeInHoursBN1)).is.true;\nexpect(userStatus1.lastClaimedTimestamp.eq(currentEpochTimeInHoursBN1)).is.true;\nconst balance = await token.balanceOf(user1.address);\nconst withdrawAmountBN = BN(50).mul(BN(10).pow(DECIMALS_BN));\nawait withdraw(distributionContract, user1, withdrawAmountBN);\nconst userStatus2 = await distributionContract.getUserStatus(user1.address);\nconst currentEpochTimeInHoursBN2 = BN(Math.floor(Date.now() / 1000 / 3600));\nconst expectedCredits = await forecastCredits(\n  distributionContract,\n  userStatus1,\n  withdrawAmountBN,\n  currentEpochTimeInHoursBN2,\n  0\n);\nconst expectedAmount = await debitWithdrawalFee(\n  token,\n  distributionContract,\n  withdrawAmountBN\n);\nexpect((await token.balanceOf(user1.address)).eq(balance.add(expectedAmount))).is.true;\nexpect(userStatus2.balance.eq(amountBN.sub(withdrawAmountBN))).is.true;\nexpect(userStatus2.forecastedCredits.eq(expectedCredits)).is.true;\nexpect(userStatus2.lastUpdatedTimestamp.eq(currentEpochTimeInHoursBN2)).is.true;\nexpect(userStatus2.lastClaimedTimestamp.eq(currentEpochTimeInHoursBN2)).is.true;",
                  "err": {},
                  "uuid": "040ae62d-f404-45b3-b28e-ffdc5900b721",
                  "parentUUID": "77587afe-2bbc-4e64-817c-4f9a2ed56955",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Multiple users can withdraw ",
                  "fullTitle": "Distribution Contract Withdraw Multiple users can withdraw ",
                  "timedOut": false,
                  "duration": 254,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN1 = BN(100).mul(BN(10).pow(DECIMALS_BN));\nconst amountBN2 = BN(50).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN1);\nawait deposit(distributionContract, token, user2, amountBN2);\nconst user1Status1 = await distributionContract.getUserStatus(user1.address);\nconst user2Status1 = await distributionContract.getUserStatus(user2.address);\nconst withdrawAmountBN1 = BN(70).mul(BN(10).pow(DECIMALS_BN));\nconst withdrawAmountBN2 = BN(30).mul(BN(10).pow(DECIMALS_BN));\nawait withdraw(distributionContract, user1, withdrawAmountBN1);\nawait withdraw(distributionContract, user2, withdrawAmountBN2);\nconst user1Status2 = await distributionContract.getUserStatus(user1.address);\nconst user2Status2 = await distributionContract.getUserStatus(user2.address);\nconst currentEpochTimeInHoursBN2 = BN(Math.floor(Date.now() / 1000 / 3600));\nconst expectedCredits1 = await forecastCredits(\n  distributionContract,\n  user1Status1,\n  withdrawAmountBN1,\n  currentEpochTimeInHoursBN2,\n  0\n);\nconst expectedCredits2 = await forecastCredits(\n  distributionContract,\n  user2Status1,\n  withdrawAmountBN2,\n  currentEpochTimeInHoursBN2,\n  0\n);\nexpect(user1Status2.balance.eq(amountBN1.sub(withdrawAmountBN1))).is.true;\nexpect(user1Status2.forecastedCredits.eq(expectedCredits1)).is.true;\nexpect(user2Status2.balance.eq(amountBN2.sub(withdrawAmountBN2))).is.true;\nexpect(user2Status2.forecastedCredits.eq(expectedCredits2)).is.true;",
                  "err": {},
                  "uuid": "768294a2-9caf-49ae-850b-0f6e30eb6eaf",
                  "parentUUID": "77587afe-2bbc-4e64-817c-4f9a2ed56955",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "On withdraw contract state changes ",
                  "fullTitle": "Distribution Contract Withdraw On withdraw contract state changes ",
                  "timedOut": false,
                  "duration": 260,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN1 = BN(100).mul(BN(10).pow(DECIMALS_BN));\nconst amountBN2 = BN(50).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN1);\nawait deposit(distributionContract, token, user2, amountBN2);\nconst user1Status1 = await distributionContract.getUserStatus(user1.address);\nconst user2Status1 = await distributionContract.getUserStatus(user2.address);\nexpect(user1Status1.balance.eq(amountBN1)).is.true;\nexpect(user1Status1.forecastedCredits.eq(amountBN1.mul(SLOT_BN))).is.true;\nexpect(user2Status1.balance.eq(amountBN2)).is.true;\nexpect(user2Status1.forecastedCredits.eq(amountBN2.mul(SLOT_BN))).is.true;\nconst contractState1 = await distributionContract.getContractState();\nexpect(contractState1.totalAmount.eq(amountBN1.add(amountBN2))).is.true;\nexpect(\n  contractState1.totalCredits.eq(\n    user1Status1.forecastedCredits.add(user2Status1.forecastedCredits)\n  )\n).is.true;\nconst withdrawAmountBN1 = BN(70).mul(BN(10).pow(DECIMALS_BN));\nconst withdrawAmountBN2 = BN(30).mul(BN(10).pow(DECIMALS_BN));\nawait withdraw(distributionContract, user1, withdrawAmountBN1);\nawait withdraw(distributionContract, user2, withdrawAmountBN2);\nconst user1Status2 = await distributionContract.getUserStatus(user1.address);\nconst user2Status2 = await distributionContract.getUserStatus(user2.address);\nconst currentEpochTimeInHoursBN2 = BN(Math.floor(Date.now() / 1000 / 3600));\nconst expectedCredits1 = await forecastCredits(\n  distributionContract,\n  user1Status1,\n  withdrawAmountBN1,\n  currentEpochTimeInHoursBN2,\n  0\n);\nconst expectedCredits2 = await forecastCredits(\n  distributionContract,\n  user2Status1,\n  withdrawAmountBN2,\n  currentEpochTimeInHoursBN2,\n  0\n);\nexpect(user1Status2.balance.eq(amountBN1.sub(withdrawAmountBN1))).is.true;\nexpect(user1Status2.forecastedCredits.eq(expectedCredits1)).is.true;\nexpect(user2Status2.balance.eq(amountBN2.sub(withdrawAmountBN2))).is.true;\nexpect(user2Status2.forecastedCredits.eq(expectedCredits2)).is.true;\nconst contractState2 = await distributionContract.getContractState();\nexpect(contractState2.totalAmount.eq(user1Status2.balance.add(user2Status2.balance))).is\n  .true;\nexpect(\n  contractState2.totalCredits.eq(\n    user1Status2.forecastedCredits.add(user2Status2.forecastedCredits)\n  )\n).is.true;",
                  "err": {},
                  "uuid": "3d5b1d83-cc85-40b1-816c-13b2b7c4cb45",
                  "parentUUID": "77587afe-2bbc-4e64-817c-4f9a2ed56955",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Users can withdraw any amount at any time ",
                  "fullTitle": "Distribution Contract Withdraw Users can withdraw any amount at any time ",
                  "timedOut": false,
                  "duration": 188,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN);\nconst balance = await token.balanceOf(user1.address);\nconst userStatus1 = await distributionContract.getUserStatus(user1.address);\nconst currentEpochTimeInHoursBN1 = BN(Math.floor(Date.now() / 1000 / 3600));\nconst withdrawAmountBN1 = BN(50).mul(BN(10).pow(DECIMALS_BN));\nconst expectedCredits1 = await forecastCredits(\n  distributionContract,\n  userStatus1,\n  withdrawAmountBN1,\n  currentEpochTimeInHoursBN1,\n  0\n);\nconst expectedAmount1 = await debitWithdrawalFee(\n  token,\n  distributionContract,\n  withdrawAmountBN1\n);\nawait withdraw(distributionContract, user1, withdrawAmountBN1);\nconst userStatus2 = await distributionContract.getUserStatus(user1.address);\nexpect((await token.balanceOf(user1.address)).eq(balance.add(expectedAmount1))).is.true;\nexpect(userStatus2.balance.eq(amountBN.sub(withdrawAmountBN1))).is.true;\nexpect(userStatus2.forecastedCredits.eq(expectedCredits1)).is.true;\nconst skippingTime = BN(10 * 24).mul(BN(3600));\nconst currentEpochTimeInHoursBN2 = BN(Math.floor(Date.now() / 1000 / 3600)).add(BN(10 * 24));\nconst withdrawAmountBN2 = BN(25).mul(BN(10).pow(DECIMALS_BN));\nconst expectedCredits2 = await forecastCredits(\n  distributionContract,\n  userStatus2,\n  withdrawAmountBN2,\n  currentEpochTimeInHoursBN2,\n  0\n);\nconst expectedAmount2 = await debitWithdrawalFee(\n  token,\n  distributionContract,\n  withdrawAmountBN2\n);\nawait skipTime(skippingTime.toNumber());\nawait withdraw(distributionContract, user1, withdrawAmountBN2);\nconst userStatus3 = await distributionContract.getUserStatus(user1.address);\nexpect(\n  (await token.balanceOf(user1.address)).eq(\n    balance.add(expectedAmount1).add(expectedAmount2)\n  )\n).is.true;\nexpect(userStatus3.balance.eq(userStatus2.balance.sub(withdrawAmountBN2))).is.true;\nexpect(userStatus3.forecastedCredits.eq(expectedCredits2)).is.true;",
                  "err": {},
                  "uuid": "3f704478-be92-4038-8ad4-ef7a5bf403ec",
                  "parentUUID": "77587afe-2bbc-4e64-817c-4f9a2ed56955",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Event emitted when fund withdrawn",
                  "fullTitle": "Distribution Contract Withdraw Event emitted when fund withdrawn",
                  "timedOut": false,
                  "duration": 83,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN);\nawait expect(distributionContract.connect(user1).withdraw(amountBN))\n  .to.emit(distributionContract, 'Withdraw')\n  .withArgs(user1.address, amountBN);",
                  "err": {},
                  "uuid": "706efc97-493a-4fd3-9ec7-7bf3d1ebdc6b",
                  "parentUUID": "77587afe-2bbc-4e64-817c-4f9a2ed56955",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Transaction Fee and Withdrawal Fee debited and transferred to treasury wallet",
                  "fullTitle": "Distribution Contract Withdraw Transaction Fee and Withdrawal Fee debited and transferred to treasury wallet",
                  "timedOut": false,
                  "duration": 121,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN);\nconst userBalance = await token.balanceOf(user1.address);\nconst treasuryBalance = await token.balanceOf(treasuryWallet.address);\nawait withdraw(distributionContract, user1, amountBN);\nconst expectedAmount = await debitWithdrawalFee(token, distributionContract, amountBN);\nexpect((await token.balanceOf(user1.address)).eq(userBalance.add(expectedAmount))).is.true;\nexpect((await token.balanceOf(treasuryWallet.address)).eq(amountBN.sub(expectedAmount))).is\n  .true;",
                  "err": {},
                  "uuid": "66f93baf-241c-4b90-83b8-75293ade2689",
                  "parentUUID": "77587afe-2bbc-4e64-817c-4f9a2ed56955",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts when tries to withdraw zero amount",
                  "fullTitle": "Distribution Contract Withdraw Reverts when tries to withdraw zero amount",
                  "timedOut": false,
                  "duration": 58,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN);\nawait expect(distributionContract.connect(user1).withdraw(BN(0))).to.be.revertedWith(\n  'LINGO: Amount cannot be zero'\n);",
                  "err": {},
                  "uuid": "2dd8dfe7-b990-4be3-9d3b-dc2bef849eff",
                  "parentUUID": "77587afe-2bbc-4e64-817c-4f9a2ed56955",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts when tries to withdraw more than staked amount",
                  "fullTitle": "Distribution Contract Withdraw Reverts when tries to withdraw more than staked amount",
                  "timedOut": false,
                  "duration": 96,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN);\nconst withdrawAmountBN = BN(1000).mul(BN(10).pow(DECIMALS_BN));\nawait expect(\n  distributionContract.connect(user1).withdraw(withdrawAmountBN)\n).to.be.revertedWith('LINGO: Insufficient balance');",
                  "err": {},
                  "uuid": "b9378051-53c6-424d-9342-d82d403739e2",
                  "parentUUID": "77587afe-2bbc-4e64-817c-4f9a2ed56955",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts when an user who have not staked tries to withdraw",
                  "fullTitle": "Distribution Contract Withdraw Reverts when an user who have not staked tries to withdraw",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait expect(distributionContract.connect(user1).withdraw(amountBN)).to.be.revertedWith(\n  'LINGO: Not an active user'\n);",
                  "err": {},
                  "uuid": "0c4b0bf1-184f-4655-ac7c-a839fd15e72b",
                  "parentUUID": "77587afe-2bbc-4e64-817c-4f9a2ed56955",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts when staking is not active",
                  "fullTitle": "Distribution Contract Withdraw Reverts when staking is not active",
                  "timedOut": false,
                  "duration": 68,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN);\nawait skipTime(BN(SLOT_BN).mul(BN(3600)).add(BN(3600)).toNumber());\nawait expect(distributionContract.connect(user1).withdraw(amountBN)).to.be.revertedWith(\n  'LINGO: Distribution is on hold. Please contact admin'\n);",
                  "err": {},
                  "uuid": "c2ea7164-f8bb-4ed5-8a57-73b6076506d4",
                  "parentUUID": "77587afe-2bbc-4e64-817c-4f9a2ed56955",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts when user have unclaimed tokens",
                  "fullTitle": "Distribution Contract Withdraw Reverts when user have unclaimed tokens",
                  "timedOut": false,
                  "duration": 119,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN);\nawait skipTime(BN(SLOT_BN).mul(BN(3600)).add(BN(3600)).toNumber());\nconst distributionAmountBN = BN(1000).mul(BN(10).pow(DECIMALS_BN));\nawait distribute(distributionContract, token, distributionAmountBN);\nawait expect(distributionContract.connect(user1).withdraw(amountBN)).to.be.revertedWith(\n  'LINGO: User have unclaimed tokens. Please claim it before deposit or withdraw'\n);",
                  "err": {},
                  "uuid": "f4c9b7ce-b84c-4bbf-a176-58cfdd317f63",
                  "parentUUID": "77587afe-2bbc-4e64-817c-4f9a2ed56955",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b2e387af-f4d8-4562-8ae8-ef59c665edf5",
                "040ae62d-f404-45b3-b28e-ffdc5900b721",
                "768294a2-9caf-49ae-850b-0f6e30eb6eaf",
                "3d5b1d83-cc85-40b1-816c-13b2b7c4cb45",
                "3f704478-be92-4038-8ad4-ef7a5bf403ec",
                "706efc97-493a-4fd3-9ec7-7bf3d1ebdc6b",
                "66f93baf-241c-4b90-83b8-75293ade2689",
                "2dd8dfe7-b990-4be3-9d3b-dc2bef849eff",
                "b9378051-53c6-424d-9342-d82d403739e2",
                "0c4b0bf1-184f-4655-ac7c-a839fd15e72b",
                "c2ea7164-f8bb-4ed5-8a57-73b6076506d4",
                "f4c9b7ce-b84c-4bbf-a176-58cfdd317f63"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1546,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "6ceb7a10-3fd6-410b-910f-ebc37c0fb0a4",
              "title": "Distribute",
              "fullFile": "C:\\Users\\prasa\\Documents\\CODE\\Accubits\\lingo-token\\test\\distributionContract.js",
              "file": "\\test\\distributionContract.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Distribute\"",
                  "fullTitle": "Distribution Contract Distribute \"before each\" hook in \"Distribute\"",
                  "timedOut": false,
                  "duration": 29,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const balanceBN = BN(1000).mul(BN(10).pow(DECIMALS_BN));\nawait initialFundAllocation(token, balanceBN);",
                  "err": {},
                  "uuid": "83154248-ed97-43a2-8df5-3dcbb04418f4",
                  "parentUUID": "6ceb7a10-3fd6-410b-910f-ebc37c0fb0a4",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Admin can distribute tokens when each slot ends",
                  "fullTitle": "Distribution Contract Distribute Admin can distribute tokens when each slot ends",
                  "timedOut": false,
                  "duration": 129,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN);\nconst contractState = await distributionContract.getContractState();\nawait skipTime(BN(SLOT_BN).mul(BN(3600)).add(BN(3600)).toNumber());\nconst distributeAmountBN = BN(10000).mul(BN(10).pow(DECIMALS_BN));\nawait distribute(distributionContract, token, distributeAmountBN);\nconst distributionHistory = await distributionContract.getDistributionHistory();\nexpect(distributionHistory.length > 0).is.true;\nexpect(distributionHistory[0].startTime.eq(contractState.startTime)).is.true;\nexpect(distributionHistory[0].endTime.eq(contractState.endTime)).is.true;\nexpect(distributionHistory[0].monthlyProfit.eq(distributeAmountBN)).is.true;\nexpect(distributionHistory[0].totalCredits.eq(contractState.totalCredits)).is.true;\nexpect(distributionHistory[0].remainingTokensToClaim.eq(distributeAmountBN)).is.true;",
                  "err": {},
                  "uuid": "fe42deaf-30b2-425b-9bd6-9ebdfa241b51",
                  "parentUUID": "6ceb7a10-3fd6-410b-910f-ebc37c0fb0a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "New slot is set after distribution function called",
                  "fullTitle": "Distribution Contract Distribute New slot is set after distribution function called",
                  "timedOut": false,
                  "duration": 116,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN);\nawait skipTime(BN(SLOT_BN).mul(BN(3600)).add(BN(3600)).toNumber());\nconst distributeAmountBN = BN(10000).mul(BN(10).pow(DECIMALS_BN));\nawait distribute(distributionContract, token, distributeAmountBN);\nconst { startTime, endTime, totalAmount, totalCredits } =\n  await distributionContract.getContractState();\nconst distributionHistory = await distributionContract.getDistributionHistory();\nexpect(distributionHistory.length > 0).is.true;\nexpect(startTime.eq(distributionHistory[0].endTime)).is.true;\nexpect(endTime.eq(distributionHistory[0].endTime.add(SLOT_BN))).is.true;\nexpect(totalCredits.eq(totalAmount.mul(endTime.sub(startTime)))).is.true;",
                  "err": {},
                  "uuid": "4a327bd7-94cd-4245-99fb-ec4506b0d074",
                  "parentUUID": "6ceb7a10-3fd6-410b-910f-ebc37c0fb0a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Event emitted when fund deposited",
                  "fullTitle": "Distribution Contract Distribute Event emitted when fund deposited",
                  "timedOut": false,
                  "duration": 101,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN);\nawait skipTime(BN(SLOT_BN).mul(BN(3600)).add(BN(3600)).toNumber());\nconst distributeAmountBN = BN(10000).mul(BN(10).pow(DECIMALS_BN));\nawait token.approve(distributionContract.address, distributeAmountBN);\nawait expect(distributionContract.distribute(distributeAmountBN))\n  .to.emit(distributionContract, 'Distribute')\n  .withArgs(distributeAmountBN);",
                  "err": {},
                  "uuid": "ab65bff7-13ef-4770-9438-cdc7f01ca825",
                  "parentUUID": "6ceb7a10-3fd6-410b-910f-ebc37c0fb0a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts when non owner tries to call distribute",
                  "fullTitle": "Distribution Contract Distribute Reverts when non owner tries to call distribute",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const distributeAmountBN = BN(10000).mul(BN(10).pow(DECIMALS_BN));\nawait token.connect(user1).approve(distributionContract.address, distributeAmountBN);\nawait expect(\n  distributionContract.connect(user1).distribute(distributeAmountBN)\n).to.be.revertedWith('Ownable: caller is not the owner');",
                  "err": {},
                  "uuid": "3c081774-7617-4438-944f-c72639cc0c96",
                  "parentUUID": "6ceb7a10-3fd6-410b-910f-ebc37c0fb0a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts when tries to distribute zero amount",
                  "fullTitle": "Distribution Contract Distribute Reverts when tries to distribute zero amount",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await token.approve(distributionContract.address, BN(0));\nawait expect(distributionContract.distribute(BN(0))).to.be.revertedWith(\n  'LINGO: Amount cannot be zero'\n);",
                  "err": {},
                  "uuid": "e5e19389-75a2-471d-a951-6f5ba551070c",
                  "parentUUID": "6ceb7a10-3fd6-410b-910f-ebc37c0fb0a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts when tries to deposit without allowance",
                  "fullTitle": "Distribution Contract Distribute Reverts when tries to deposit without allowance",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait skipTime(BN(SLOT_BN).mul(BN(3600)).add(BN(3600)).toNumber());\nawait expect(distributionContract.distribute(amountBN)).to.be.revertedWith(\n  'LINGO: Insufficient allowance'\n);",
                  "err": {},
                  "uuid": "8655e71e-d05f-4c37-8a0e-d8e706a16bec",
                  "parentUUID": "6ceb7a10-3fd6-410b-910f-ebc37c0fb0a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts when tries to distribute before ending the slot",
                  "fullTitle": "Distribution Contract Distribute Reverts when tries to distribute before ending the slot",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const distributeAmountBN = BN(10000).mul(BN(10).pow(DECIMALS_BN));\nawait skipTime(\n  BN(SLOT_BN.sub(BN(24)))\n    .mul(BN(3600))\n    .toNumber()\n);\nawait token.approve(distributionContract.address, distributeAmountBN);\nawait expect(distributionContract.distribute(distributeAmountBN)).to.be.revertedWith(\n  'LINGO: Current slot is active'\n);",
                  "err": {},
                  "uuid": "72ef6a52-02f1-4da1-a44d-b3cf2698a888",
                  "parentUUID": "6ceb7a10-3fd6-410b-910f-ebc37c0fb0a4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fe42deaf-30b2-425b-9bd6-9ebdfa241b51",
                "4a327bd7-94cd-4245-99fb-ec4506b0d074",
                "ab65bff7-13ef-4770-9438-cdc7f01ca825",
                "3c081774-7617-4438-944f-c72639cc0c96",
                "e5e19389-75a2-471d-a951-6f5ba551070c",
                "8655e71e-d05f-4c37-8a0e-d8e706a16bec",
                "72ef6a52-02f1-4da1-a44d-b3cf2698a888"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 432,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "57b6ef3a-9fa2-4f5b-9c56-4831867a304b",
              "title": "Claim",
              "fullFile": "C:\\Users\\prasa\\Documents\\CODE\\Accubits\\lingo-token\\test\\distributionContract.js",
              "file": "\\test\\distributionContract.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Claim\"",
                  "fullTitle": "Distribution Contract Claim \"before each\" hook in \"Claim\"",
                  "timedOut": false,
                  "duration": 28,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const balanceBN = BN(1000).mul(BN(10).pow(DECIMALS_BN));\nawait initialFundAllocation(token, balanceBN);",
                  "err": {},
                  "uuid": "5f25ee90-ead8-4fab-9afc-4a8a7ca68a8d",
                  "parentUUID": "57b6ef3a-9fa2-4f5b-9c56-4831867a304b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Users can claim their rewards when each slot ends",
                  "fullTitle": "Distribution Contract Claim Users can claim their rewards when each slot ends",
                  "timedOut": false,
                  "duration": 152,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN);\nawait skipTime(SLOT_BN.mul(BN(3600)).add(BN(3600)).toNumber());\nconst distributeAmountBN = BN(10000).mul(BN(10).pow(DECIMALS_BN));\nawait distribute(distributionContract, token, distributeAmountBN);\nconst balance = await token.balanceOf(user1.address);\nawait distributionContract.connect(user1).claimRewards();\nconst expectedAmount = await debitFee(token, distributeAmountBN);\nconst finalBalance = await token.balanceOf(user1.address);\nconst epochTimeInHoursBN = BN(Math.floor(Date.now() / 1000 / 3600)).add(SLOT_BN.add(BN(1)));\nconst userStatus = await distributionContract.getUserStatus(user1.address);\nexpect(finalBalance.sub(balance).eq(expectedAmount)).is.true;\nexpect(userStatus.lastClaimedTimestamp.eq(epochTimeInHoursBN)).is.true;\nconst distributionHistory = await distributionContract.getDistributionHistory();\nexpect(distributionHistory[0].remainingTokensToClaim.eq(BN(0))).is.true;",
                  "err": {},
                  "uuid": "b4277336-50ab-48aa-87b1-6590e82f2f4d",
                  "parentUUID": "57b6ef3a-9fa2-4f5b-9c56-4831867a304b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Tokens are distributed among the users according to their staked amount and time period",
                  "fullTitle": "Distribution Contract Claim Tokens are distributed among the users according to their staked amount and time period",
                  "timedOut": false,
                  "duration": 258,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN);\nawait deposit(distributionContract, token, user2, amountBN);\nawait skipTime(SLOT_BN.mul(BN(3600)).add(BN(3600)).toNumber());\nconst distributeAmountBN = BN(10000).mul(BN(10).pow(DECIMALS_BN));\nawait distribute(distributionContract, token, distributeAmountBN);\nconst balanceUser1 = await token.balanceOf(user1.address);\nawait distributionContract.connect(user1).claimRewards();\nconst expectedAmount = await debitFee(token, distributeAmountBN.div(2));\nconst finalBalanceUser1 = await token.balanceOf(user1.address);\nconst epochTimeInHoursBN = BN(Math.floor(Date.now() / 1000 / 3600)).add(SLOT_BN.add(BN(1)));\nconst user1Status = await distributionContract.getUserStatus(user1.address);\nexpect(finalBalanceUser1.sub(balanceUser1).eq(expectedAmount)).is.true;\nexpect(user1Status.lastClaimedTimestamp.eq(epochTimeInHoursBN)).is.true;\nconst distributionHistory1 = await distributionContract.getDistributionHistory();\nexpect(distributionHistory1[0].remainingTokensToClaim.eq(distributeAmountBN.div(2))).is.true;\nconst balanceUser2 = await token.balanceOf(user2.address);\nawait distributionContract.connect(user2).claimRewards();\nconst finalBalanceUser2 = await token.balanceOf(user2.address);\nconst user2Status = await distributionContract.getUserStatus(user2.address);\nexpect(finalBalanceUser2.sub(balanceUser2).eq(expectedAmount)).is.true;\nexpect(user2Status.lastClaimedTimestamp.eq(epochTimeInHoursBN)).is.true;\nconst distributionHistory2 = await distributionContract.getDistributionHistory();\nexpect(distributionHistory2[0].remainingTokensToClaim.eq(BN(0))).is.true;",
                  "err": {},
                  "uuid": "a5591822-6d6d-4b2f-a98b-1ae19d078a6f",
                  "parentUUID": "57b6ef3a-9fa2-4f5b-9c56-4831867a304b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Users can claim their pending rewards together",
                  "fullTitle": "Distribution Contract Claim Users can claim their pending rewards together",
                  "timedOut": false,
                  "duration": 145,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN);\nconst skipTimeInSeconds = SLOT_BN.mul(BN(3600)).add(BN(3600));\nawait skipTime(skipTimeInSeconds.toNumber());\nconst distributeAmountBN = BN(10000).mul(BN(10).pow(DECIMALS_BN));\nawait distribute(distributionContract, token, distributeAmountBN);\nawait skipTime(skipTimeInSeconds.toNumber());\nawait distribute(distributionContract, token, distributeAmountBN);\nconst balance = await token.balanceOf(user1.address);\nawait distributionContract.connect(user1).claimRewards();\nconst expectedAmount = await debitFee(token, distributeAmountBN.mul(BN(2)));\nconst finalBalance = await token.balanceOf(user1.address);\nconst epochTimeInHoursBN = BN(Math.floor(Date.now() / 1000 / 3600)).add(\n  SLOT_BN.mul(BN(2)).add(BN(2))\n);\nconst userStatus = await distributionContract.getUserStatus(user1.address);\nexpect(finalBalance.sub(balance).eq(expectedAmount)).is.true;\nexpect(userStatus.lastClaimedTimestamp.eq(epochTimeInHoursBN)).is.true;\nconst distributionHistory = await distributionContract.getDistributionHistory();\nfor (let i = 0; i < distributionHistory.length; i++) {\n  expect(distributionHistory[i].remainingTokensToClaim.eq(BN(0))).is.true;\n}",
                  "err": {},
                  "uuid": "86167b0c-2618-4464-baf5-41a7a27b1a36",
                  "parentUUID": "57b6ef3a-9fa2-4f5b-9c56-4831867a304b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Event emitted when fund claimed",
                  "fullTitle": "Distribution Contract Claim Event emitted when fund claimed",
                  "timedOut": false,
                  "duration": 116,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN);\nawait skipTime(SLOT_BN.mul(BN(3600)).add(BN(3600)).toNumber());\nconst distributeAmountBN = BN(10000).mul(BN(10).pow(DECIMALS_BN));\nawait distribute(distributionContract, token, distributeAmountBN);\nawait expect(distributionContract.connect(user1).claimRewards())\n  .to.emit(distributionContract, 'Claim')\n  .withArgs(user1.address, distributeAmountBN);",
                  "err": {},
                  "uuid": "1356dd7b-cbb9-434f-bab5-a4855c7f8288",
                  "parentUUID": "57b6ef3a-9fa2-4f5b-9c56-4831867a304b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts when user tries to claim after a successful claim within same slot",
                  "fullTitle": "Distribution Contract Claim Reverts when user tries to claim after a successful claim within same slot",
                  "timedOut": false,
                  "duration": 149,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN);\nawait skipTime(SLOT_BN.mul(BN(3600)).add(BN(3600)).toNumber());\nconst distributeAmountBN = BN(10000).mul(BN(10).pow(DECIMALS_BN));\nawait distribute(distributionContract, token, distributeAmountBN);\nawait distributionContract.connect(user1).claimRewards();\nawait expect(distributionContract.connect(user1).claimRewards()).to.be.revertedWith(\n  'LINGO: Already claimed'\n);",
                  "err": {},
                  "uuid": "cdf56e86-35e3-4a34-9cee-b179d7b8774f",
                  "parentUUID": "57b6ef3a-9fa2-4f5b-9c56-4831867a304b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts when user tries to claim with no rewards",
                  "fullTitle": "Distribution Contract Claim Reverts when user tries to claim with no rewards",
                  "timedOut": false,
                  "duration": 192,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN);\nconst skipTimeBN = SLOT_BN.mul(BN(3600));\nawait skipTime(skipTimeBN.sub(BN(3600)).toNumber());\nawait withdraw(distributionContract, user1, amountBN);\nawait skipTime(BN(2).mul(BN(3600)).toNumber());\nconst distributeAmountBN = BN(10000).mul(BN(10).pow(DECIMALS_BN));\nawait distribute(distributionContract, token, distributeAmountBN);\nawait distributionContract.connect(user1).claimRewards();\nawait skipTime(skipTimeBN.toNumber());\nawait distribute(distributionContract, token, distributeAmountBN);\nawait expect(distributionContract.connect(user1).claimRewards()).to.be.revertedWith(\n  'LINGO: Zero rewards'\n);",
                  "err": {},
                  "uuid": "ec51ad2f-bd0b-4867-a1ac-2655debf778f",
                  "parentUUID": "57b6ef3a-9fa2-4f5b-9c56-4831867a304b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts when an user who have not staked tries to claim",
                  "fullTitle": "Distribution Contract Claim Reverts when an user who have not staked tries to claim",
                  "timedOut": false,
                  "duration": 30,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await skipTime(SLOT_BN.mul(BN(3600)).add(BN(3600)).toNumber());\nconst distributeAmountBN = BN(10000).mul(BN(10).pow(DECIMALS_BN));\nawait distribute(distributionContract, token, distributeAmountBN);\nawait expect(distributionContract.connect(user1).claimRewards()).to.be.revertedWith(\n  'LINGO: Not an active user'\n);",
                  "err": {},
                  "uuid": "6d33c0d3-d55e-438f-9c90-e5afb64b8ab1",
                  "parentUUID": "57b6ef3a-9fa2-4f5b-9c56-4831867a304b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts when staking is not active",
                  "fullTitle": "Distribution Contract Claim Reverts when staking is not active",
                  "timedOut": false,
                  "duration": 74,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN);\nawait skipTime(BN(SLOT_BN).mul(BN(3600)).add(BN(3600)).toNumber());\nawait expect(distributionContract.connect(user1).claimRewards()).to.be.revertedWith(\n  'LINGO: Distribution is on hold. Please contact admin'\n);",
                  "err": {},
                  "uuid": "17a5f6c4-a227-46a1-ac89-83121107e4e6",
                  "parentUUID": "57b6ef3a-9fa2-4f5b-9c56-4831867a304b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b4277336-50ab-48aa-87b1-6590e82f2f4d",
                "a5591822-6d6d-4b2f-a98b-1ae19d078a6f",
                "86167b0c-2618-4464-baf5-41a7a27b1a36",
                "1356dd7b-cbb9-434f-bab5-a4855c7f8288",
                "cdf56e86-35e3-4a34-9cee-b179d7b8774f",
                "ec51ad2f-bd0b-4867-a1ac-2655debf778f",
                "6d33c0d3-d55e-438f-9c90-e5afb64b8ab1",
                "17a5f6c4-a227-46a1-ac89-83121107e4e6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1116,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "e35c218b-36d9-4294-a301-3361fa9915c7",
              "title": "Admin Claim",
              "fullFile": "C:\\Users\\prasa\\Documents\\CODE\\Accubits\\lingo-token\\test\\distributionContract.js",
              "file": "\\test\\distributionContract.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Admin Claim\"",
                  "fullTitle": "Distribution Contract Admin Claim \"before each\" hook in \"Admin Claim\"",
                  "timedOut": false,
                  "duration": 25,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const balanceBN = BN(1000).mul(BN(10).pow(DECIMALS_BN));\nawait initialFundAllocation(token, balanceBN);",
                  "err": {},
                  "uuid": "4111803b-ac4d-4648-93d3-1fe1a27da4ce",
                  "parentUUID": "e35c218b-36d9-4294-a301-3361fa9915c7",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Admin can withdraw the expired tokens after admin claim period",
                  "fullTitle": "Distribution Contract Admin Claim Admin can withdraw the expired tokens after admin claim period",
                  "timedOut": false,
                  "duration": 126,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN);\nawait skipTime(SLOT_BN.mul(BN(3600)).add(BN(3600)).toNumber());\nconst distributeAmountBN = BN(10000).mul(BN(10).pow(DECIMALS_BN));\nawait distribute(distributionContract, token, distributeAmountBN);\nconst balance = await token.balanceOf(owner.address);\nconst adminClaimPeriod = await distributionContract.getAdminClaimPeriod();\nawait skipTime(adminClaimPeriod.mul(BN(3600)).toNumber());\nawait distributionContract.adminClaim();\nconst finalBalance = await token.balanceOf(owner.address);\nexpect(finalBalance.sub(balance).eq(distributeAmountBN)).is.true;\nconst distributionHistory = await distributionContract.getDistributionHistory();\nexpect(distributionHistory[distributionHistory.length - 1].remainingTokensToClaim.eq(BN(0)))\n  .is.true;",
                  "err": {},
                  "uuid": "00254f74-4996-4340-a46a-382c375eb808",
                  "parentUUID": "e35c218b-36d9-4294-a301-3361fa9915c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Admin can withdraw the expired tokens of multiple slots together",
                  "fullTitle": "Distribution Contract Admin Claim Admin can withdraw the expired tokens of multiple slots together",
                  "timedOut": false,
                  "duration": 171,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN);\nawait skipTime(SLOT_BN.mul(BN(3600)).add(BN(3600)).toNumber());\nconst distributeAmountBN = BN(10000).mul(BN(10).pow(DECIMALS_BN));\nawait distribute(distributionContract, token, distributeAmountBN);\nawait skipTime(SLOT_BN.mul(BN(3600)).toNumber());\nawait distribute(distributionContract, token, distributeAmountBN);\nawait skipTime(SLOT_BN.mul(BN(3600)).toNumber());\nawait distribute(distributionContract, token, distributeAmountBN);\nconst balance = await token.balanceOf(owner.address);\nlet distributionHistory = await distributionContract.getDistributionHistory();\nconst expectedAmount = distributionHistory.reduce((acc, curr) => {\n  return BN(acc).add(curr.remainingTokensToClaim);\n}, 0);\nconst adminClaimPeriod = await distributionContract.getAdminClaimPeriod();\nawait skipTime(adminClaimPeriod.mul(BN(3600)).toNumber());\nawait distributionContract.adminClaim();\nconst finalBalance = await token.balanceOf(owner.address);\nexpect(finalBalance.sub(balance).eq(expectedAmount)).is.true;\ndistributionHistory = await distributionContract.getDistributionHistory();\ndistributionHistory.forEach((val) => {\n  expect(val.remainingTokensToClaim.eq(BN(0))).is.true;\n});",
                  "err": {},
                  "uuid": "b74c80b5-688d-4d91-8175-a74d0b1175b7",
                  "parentUUID": "e35c218b-36d9-4294-a301-3361fa9915c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Admin can withdraw only expired tokens",
                  "fullTitle": "Distribution Contract Admin Claim Admin can withdraw only expired tokens",
                  "timedOut": false,
                  "duration": 173,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN);\nawait skipTime(SLOT_BN.mul(BN(3600)).add(BN(3600)).toNumber());\nconst distributeAmountBN = BN(10000).mul(BN(10).pow(DECIMALS_BN));\nawait distribute(distributionContract, token, distributeAmountBN);\nawait skipTime(SLOT_BN.mul(BN(3600)).toNumber());\nawait distribute(distributionContract, token, distributeAmountBN);\nawait skipTime(SLOT_BN.mul(BN(3600)).toNumber());\nawait distribute(distributionContract, token, distributeAmountBN);\nconst adminClaimPeriod = await distributionContract.getAdminClaimPeriod();\nawait skipTime(adminClaimPeriod.sub(SLOT_BN).mul(BN(3600)).toNumber());\nawait distributionContract.adminClaim();\ndistributionHistory = await distributionContract.getDistributionHistory();\nexpect(distributionHistory[distributionHistory.length - 1].remainingTokensToClaim.eq(BN(0)))\n  .is.false;",
                  "err": {},
                  "uuid": "78be89b6-7b70-42df-acdc-ad8f75a390db",
                  "parentUUID": "e35c218b-36d9-4294-a301-3361fa9915c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Event emitted when admin claims expired tokens",
                  "fullTitle": "Distribution Contract Admin Claim Event emitted when admin claims expired tokens",
                  "timedOut": false,
                  "duration": 139,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN);\nawait skipTime(SLOT_BN.mul(BN(3600)).add(BN(3600)).toNumber());\nconst distributeAmountBN = BN(10000).mul(BN(10).pow(DECIMALS_BN));\nawait distribute(distributionContract, token, distributeAmountBN);\nconst adminClaimPeriod = await distributionContract.getAdminClaimPeriod();\nawait skipTime(adminClaimPeriod.mul(BN(3600)).toNumber());\nawait expect(distributionContract.adminClaim())\n  .to.emit(distributionContract, 'AdminClaim')\n  .withArgs(owner.address, distributeAmountBN);",
                  "err": {},
                  "uuid": "e3dd6281-d967-4c11-8e77-d1b7e96f4140",
                  "parentUUID": "e35c218b-36d9-4294-a301-3361fa9915c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts when now owner tries to claim expired rewards",
                  "fullTitle": "Distribution Contract Admin Claim Reverts when now owner tries to claim expired rewards",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await expect(distributionContract.connect(user1).adminClaim()).to.be.revertedWith(\n  'Ownable: caller is not the owner'\n);",
                  "err": {},
                  "uuid": "74e81cbd-4db0-4a6d-bfd8-1fbef6a2975d",
                  "parentUUID": "e35c218b-36d9-4294-a301-3361fa9915c7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "00254f74-4996-4340-a46a-382c375eb808",
                "b74c80b5-688d-4d91-8175-a74d0b1175b7",
                "78be89b6-7b70-42df-acdc-ad8f75a390db",
                "e3dd6281-d967-4c11-8e77-d1b7e96f4140",
                "74e81cbd-4db0-4a6d-bfd8-1fbef6a2975d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 618,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "6d73aa49-5f08-48e2-b2d4-0c6fc5990638",
              "title": "Random",
              "fullFile": "C:\\Users\\prasa\\Documents\\CODE\\Accubits\\lingo-token\\test\\distributionContract.js",
              "file": "\\test\\distributionContract.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Random\"",
                  "fullTitle": "Distribution Contract Random \"before each\" hook in \"Random\"",
                  "timedOut": false,
                  "duration": 25,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const balanceBN = BN(1000).mul(BN(10).pow(DECIMALS_BN));\nawait initialFundAllocation(token, balanceBN);",
                  "err": {},
                  "uuid": "958c03c8-567e-4141-ad04-779d1e5f3e2c",
                  "parentUUID": "6d73aa49-5f08-48e2-b2d4-0c6fc5990638",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Random 1",
                  "fullTitle": "Distribution Contract Random Random 1",
                  "timedOut": false,
                  "duration": 366,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN1 = BN(101).mul(BN(10).pow(DECIMALS_BN));\nconst amountBN2 = BN(67).mul(BN(10).pow(DECIMALS_BN));\nconst amountBN3 = BN(33).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN1);\nawait deposit(distributionContract, token, user2, amountBN2);\nawait deposit(distributionContract, token, user3, amountBN3);\nawait skipTime(SLOT_BN.mul(BN(3600)).add(BN(3600)).toNumber());\nconst distributeAmountBN = BN(10000).mul(BN(10).pow(DECIMALS_BN));\nawait distribute(distributionContract, token, distributeAmountBN);\nawait distributionContract.connect(user1).claimRewards();\nawait distributionContract.connect(user2).claimRewards();\nawait distributionContract.connect(user3).claimRewards();",
                  "err": {},
                  "uuid": "4df11e4a-825d-4693-9d65-6bf7b510b7b1",
                  "parentUUID": "6d73aa49-5f08-48e2-b2d4-0c6fc5990638",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Random 2",
                  "fullTitle": "Distribution Contract Random Random 2",
                  "timedOut": false,
                  "duration": 333,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN1 = BN(101).mul(BN(10).pow(DECIMALS_BN));\nconst amountBN2 = BN(67).mul(BN(10).pow(DECIMALS_BN));\nconst amountBN3 = BN(33).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN1);\nawait skipTime(\n  BN(10 * 24)\n    .mul(BN(3600))\n    .toNumber()\n);\nawait deposit(distributionContract, token, user2, amountBN2);\nawait skipTime(\n  BN(10 * 24)\n    .mul(BN(3600))\n    .toNumber()\n);\nawait deposit(distributionContract, token, user3, amountBN3);\nawait skipTime(\n  BN(11 * 24)\n    .mul(BN(3600))\n    .toNumber()\n);\nconst distributeAmountBN = BN(10000).mul(BN(10).pow(DECIMALS_BN));\nawait distribute(distributionContract, token, distributeAmountBN);\nawait distributionContract.connect(user1).claimRewards();\nawait distributionContract.connect(user2).claimRewards();\nawait distributionContract.connect(user3).claimRewards();",
                  "err": {},
                  "uuid": "b376cb25-370f-4551-813b-32911af07a9a",
                  "parentUUID": "6d73aa49-5f08-48e2-b2d4-0c6fc5990638",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Random 3",
                  "fullTitle": "Distribution Contract Random Random 3",
                  "timedOut": false,
                  "duration": 428,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN1 = BN(101).mul(BN(10).pow(DECIMALS_BN));\nconst amountBN2 = BN(67).mul(BN(10).pow(DECIMALS_BN));\nconst amountBN3 = BN(33).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN1);\nawait skipTime(\n  BN(10 * 24)\n    .mul(BN(3600))\n    .toNumber()\n);\nawait deposit(distributionContract, token, user2, amountBN2);\nawait withdraw(distributionContract, user1, BN(10).mul(BN(10).pow(DECIMALS_BN)));\nawait skipTime(\n  BN(10 * 24)\n    .mul(BN(3600))\n    .toNumber()\n);\nawait deposit(distributionContract, token, user3, amountBN3);\nawait withdraw(distributionContract, user2, BN(17).mul(BN(10).pow(DECIMALS_BN)));\nawait skipTime(\n  BN(11 * 24)\n    .mul(BN(3600))\n    .toNumber()\n);\nconst distributeAmountBN = BN(10000).mul(BN(10).pow(DECIMALS_BN));\nawait distribute(distributionContract, token, distributeAmountBN);\nawait distributionContract.connect(user1).claimRewards();\nawait distributionContract.connect(user2).claimRewards();\nawait distributionContract.connect(user3).claimRewards();",
                  "err": {},
                  "uuid": "f2f03c49-8dab-4eb5-b5e1-f59badbcdab7",
                  "parentUUID": "6d73aa49-5f08-48e2-b2d4-0c6fc5990638",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Random 4",
                  "fullTitle": "Distribution Contract Random Random 4",
                  "timedOut": false,
                  "duration": 481,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN1 = BN(101).mul(BN(10).pow(DECIMALS_BN));\nconst amountBN2 = BN(67).mul(BN(10).pow(DECIMALS_BN));\nconst amountBN3 = BN(33).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN1);\nawait skipTime(\n  BN(15 * 24)\n    .mul(BN(3600))\n    .toNumber()\n);\nawait deposit(distributionContract, token, user2, amountBN2);\nawait withdraw(distributionContract, user1, BN(10).mul(BN(10).pow(DECIMALS_BN)));\nawait deposit(distributionContract, token, user3, amountBN3);\nawait skipTime(\n  BN(5 * 24)\n    .mul(BN(3600))\n    .toNumber()\n);\nawait deposit(distributionContract, token, user1, amountBN3);\nawait withdraw(distributionContract, user2, amountBN2);\nawait skipTime(\n  BN(11 * 24)\n    .mul(BN(3600))\n    .toNumber()\n);\nconst distributeAmountBN = BN(10000).mul(BN(10).pow(DECIMALS_BN));\nawait distribute(distributionContract, token, distributeAmountBN);\nawait distributionContract.connect(user1).claimRewards();\nawait distributionContract.connect(user2).claimRewards();\nawait distributionContract.connect(user3).claimRewards();",
                  "err": {},
                  "uuid": "fa78c32f-a43c-46c6-a60f-ca82a4f9a3e6",
                  "parentUUID": "6d73aa49-5f08-48e2-b2d4-0c6fc5990638",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Random 5",
                  "fullTitle": "Distribution Contract Random Random 5",
                  "timedOut": false,
                  "duration": 534,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN1 = BN(101).mul(BN(10).pow(DECIMALS_BN));\nconst amountBN2 = BN(67).mul(BN(10).pow(DECIMALS_BN));\nconst amountBN3 = BN(33).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN1);\nawait skipTime(\n  BN(15 * 24)\n    .mul(BN(3600))\n    .toNumber()\n);\nawait deposit(distributionContract, token, user2, amountBN2);\nawait withdraw(distributionContract, user1, BN(10).mul(BN(10).pow(DECIMALS_BN)));\nawait deposit(distributionContract, token, user3, amountBN3);\nawait skipTime(\n  BN(5 * 24)\n    .mul(BN(3600))\n    .toNumber()\n);\nawait deposit(distributionContract, token, user1, amountBN3);\nawait withdraw(distributionContract, user2, amountBN2);\nawait skipTime(\n  BN(11 * 24)\n    .mul(BN(3600))\n    .toNumber()\n);\nconst distributeAmountBN = BN(10000).mul(BN(10).pow(DECIMALS_BN));\nawait distribute(distributionContract, token, distributeAmountBN);\nawait distributionContract.connect(user1).claimRewards();\nawait distributionContract.connect(user2).claimRewards();\nawait skipTime(\n  BN(10 * 24)\n    .mul(BN(3600))\n    .toNumber()\n);\nawait distributionContract.connect(user3).claimRewards();",
                  "err": {},
                  "uuid": "754ac0c7-699b-415a-92e7-7bb8f29f070a",
                  "parentUUID": "6d73aa49-5f08-48e2-b2d4-0c6fc5990638",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Random 6",
                  "fullTitle": "Distribution Contract Random Random 6",
                  "timedOut": false,
                  "duration": 716,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN1 = BN(101).mul(BN(10).pow(DECIMALS_BN));\nconst amountBN2 = BN(67).mul(BN(10).pow(DECIMALS_BN));\nconst amountBN3 = BN(33).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN1);\nawait skipTime(\n  BN(15 * 24)\n    .mul(BN(3600))\n    .toNumber()\n);\nawait deposit(distributionContract, token, user2, amountBN2);\nawait withdraw(distributionContract, user1, BN(10).mul(BN(10).pow(DECIMALS_BN)));\nawait deposit(distributionContract, token, user3, amountBN3);\nawait skipTime(\n  BN(5 * 24)\n    .mul(BN(3600))\n    .toNumber()\n);\nawait deposit(distributionContract, token, user1, amountBN3);\nawait withdraw(distributionContract, user2, amountBN2);\nawait skipTime(\n  BN(11 * 24)\n    .mul(BN(3600))\n    .toNumber()\n);\nconst distributeAmountBN = BN(10000).mul(BN(10).pow(DECIMALS_BN));\nawait distribute(distributionContract, token, distributeAmountBN);\nawait distributionContract.connect(user1).claimRewards();\nawait distributionContract.connect(user2).claimRewards();\nawait skipTime(\n  BN(10 * 24)\n    .mul(BN(3600))\n    .toNumber()\n);\nawait deposit(distributionContract, token, user1, amountBN3);\nawait deposit(distributionContract, token, user2, amountBN3);\nawait skipTime(\n  BN(10 * 24)\n    .mul(BN(3600))\n    .toNumber()\n);\nawait withdraw(distributionContract, user2, BN(20).mul(BN(10).pow(DECIMALS_BN)));\nawait distributionContract.connect(user3).claimRewards();",
                  "err": {},
                  "uuid": "b826fff5-edb3-4783-b3d2-8cea688d94b9",
                  "parentUUID": "6d73aa49-5f08-48e2-b2d4-0c6fc5990638",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Random 7",
                  "fullTitle": "Distribution Contract Random Random 7",
                  "timedOut": false,
                  "duration": 750,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountBN1 = BN(101).mul(BN(10).pow(DECIMALS_BN));\nconst amountBN2 = BN(67).mul(BN(10).pow(DECIMALS_BN));\nconst amountBN3 = BN(33).mul(BN(10).pow(DECIMALS_BN));\nawait deposit(distributionContract, token, user1, amountBN1);\nawait skipTime(\n  BN(15 * 24)\n    .mul(BN(3600))\n    .toNumber()\n);\nawait deposit(distributionContract, token, user2, amountBN2);\nawait withdraw(distributionContract, user1, BN(10).mul(BN(10).pow(DECIMALS_BN)));\nawait deposit(distributionContract, token, user3, amountBN3);\nawait skipTime(\n  BN(5 * 24)\n    .mul(BN(3600))\n    .toNumber()\n);\nawait deposit(distributionContract, token, user1, amountBN3);\nawait withdraw(distributionContract, user2, amountBN2);\nawait skipTime(\n  BN(11 * 24)\n    .mul(BN(3600))\n    .toNumber()\n);\nconst distributeAmountBN = BN(10000).mul(BN(10).pow(DECIMALS_BN));\nawait distribute(distributionContract, token, distributeAmountBN);\nawait distributionContract.connect(user1).claimRewards();\nawait skipTime(\n  BN(10 * 24)\n    .mul(BN(3600))\n    .toNumber()\n);\nawait distributionContract.connect(user2).claimRewards();\nawait deposit(distributionContract, token, user1, amountBN3);\nawait deposit(distributionContract, token, user2, amountBN3);\nawait skipTime(\n  BN(5 * 24)\n    .mul(BN(3600))\n    .toNumber()\n);\nawait withdraw(distributionContract, user2, BN(20).mul(BN(10).pow(DECIMALS_BN)));\nawait skipTime(\n  BN(16 * 24)\n    .mul(BN(3600))\n    .toNumber()\n);\nawait distribute(distributionContract, token, BN(1).mul(BN(10).pow(DECIMALS_BN)));\nawait distributionContract.connect(user3).claimRewards();",
                  "err": {},
                  "uuid": "982eec35-ec64-4b8d-afee-1b4371aa0e56",
                  "parentUUID": "6d73aa49-5f08-48e2-b2d4-0c6fc5990638",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4df11e4a-825d-4693-9d65-6bf7b510b7b1",
                "b376cb25-370f-4551-813b-32911af07a9a",
                "f2f03c49-8dab-4eb5-b5e1-f59badbcdab7",
                "fa78c32f-a43c-46c6-a60f-ca82a4f9a3e6",
                "754ac0c7-699b-415a-92e7-7bb8f29f070a",
                "b826fff5-edb3-4783-b3d2-8cea688d94b9",
                "982eec35-ec64-4b8d-afee-1b4371aa0e56"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3608,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "9a03da4a-1b3b-4692-89aa-4c29f17fb363",
          "title": "LINGO Token",
          "fullFile": "C:\\Users\\prasa\\Documents\\CODE\\Accubits\\lingo-token\\test\\lingoTokenContract.js",
          "file": "\\test\\lingoTokenContract.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"LINGO Token\"",
              "fullTitle": "LINGO Token \"before each\" hook in \"LINGO Token\"",
              "timedOut": false,
              "duration": 57,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "[owner, user1, user2, user3, treasuryWallet] = await ethers.getSigners();\nconst Token = await ethers.getContractFactory('LINGO');\ntoken = await Token.deploy(\n  NAME,\n  SYMBOL,\n  TOTAL_SUPPLY_BN,\n  owner.address,\n  treasuryWallet.address,\n  FEE_BN\n);",
              "err": {},
              "uuid": "a5f85c4f-f7c2-478e-9c5d-153ceaca7952",
              "parentUUID": "9a03da4a-1b3b-4692-89aa-4c29f17fb363",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "97c2a971-cdfe-4997-a353-1b6aa231a4a6",
              "title": "Deployment",
              "fullFile": "C:\\Users\\prasa\\Documents\\CODE\\Accubits\\lingo-token\\test\\lingoTokenContract.js",
              "file": "\\test\\lingoTokenContract.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Ownership transferred from deployer to owner",
                  "fullTitle": "LINGO Token Deployment Ownership transferred from deployer to owner",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await token.owner();\nexpect(result).to.equal(owner.address);",
                  "err": {},
                  "uuid": "e7b60e0b-edfc-4430-b7d8-14bab7c156d2",
                  "parentUUID": "97c2a971-cdfe-4997-a353-1b6aa231a4a6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e7b60e0b-edfc-4430-b7d8-14bab7c156d2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "6026aa2c-be54-431c-8948-587140f3f4d2",
              "title": "Metadata",
              "fullFile": "C:\\Users\\prasa\\Documents\\CODE\\Accubits\\lingo-token\\test\\lingoTokenContract.js",
              "file": "\\test\\lingoTokenContract.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Token metadata is correct",
                  "fullTitle": "LINGO Token Metadata Token metadata is correct",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await token.name()).to.equal(NAME);\nexpect(await token.symbol()).to.equal(SYMBOL);\nexpect(await token.decimals()).to.equals(Number(DECIMALS_BN));\nexpect((await token.getTransferFee()).eq(FEE_BN)).is.true;",
                  "err": {},
                  "uuid": "2a4d463c-57c2-4796-8efc-d5c3fefe569a",
                  "parentUUID": "6026aa2c-be54-431c-8948-587140f3f4d2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2a4d463c-57c2-4796-8efc-d5c3fefe569a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "5a1ab0f2-8b6c-4fb7-8288-e21b7dc50236",
              "title": "Balance",
              "fullFile": "C:\\Users\\prasa\\Documents\\CODE\\Accubits\\lingo-token\\test\\lingoTokenContract.js",
              "file": "\\test\\lingoTokenContract.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Users can check their balance",
                  "fullTitle": "LINGO Token Balance Users can check their balance",
                  "timedOut": false,
                  "duration": 32,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect((await token.balanceOf(user1.address)).eq(BN(0))).is.true;\nconst amountToSendBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\n//admin to user1.address\nawait token.transfer(user1.address, amountToSendBN);\nexpect((await token.balanceOf(user1.address)).eq(amountToSendBN)).is.true;",
                  "err": {},
                  "uuid": "b369d6a3-d8cc-48c2-b550-99407e3210f5",
                  "parentUUID": "5a1ab0f2-8b6c-4fb7-8288-e21b7dc50236",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b369d6a3-d8cc-48c2-b550-99407e3210f5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 32,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "3c074783-8461-4e01-bec4-536a23658bd6",
              "title": "Transfer",
              "fullFile": "C:\\Users\\prasa\\Documents\\CODE\\Accubits\\lingo-token\\test\\lingoTokenContract.js",
              "file": "\\test\\lingoTokenContract.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Initial supply minted and transferred to owner",
                  "fullTitle": "LINGO Token Transfer Initial supply minted and transferred to owner",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect((await token.balanceOf(owner.address)).eq(TOTAL_SUPPLY_BN_WEI)).is.true;",
                  "err": {},
                  "uuid": "4d1c285b-69f2-4ce9-aa09-217ea4a6a10b",
                  "parentUUID": "3c074783-8461-4e01-bec4-536a23658bd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Users can transfer tokens to other users",
                  "fullTitle": "LINGO Token Transfer Users can transfer tokens to other users",
                  "timedOut": false,
                  "duration": 30,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountToSendBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\n//admin to user1.address\nawait token.transfer(user1.address, amountToSendBN);\nexpect((await token.balanceOf(user1.address)).eq(amountToSendBN)).is.true;\n//user1.address to user2.address\nawait token.connect(user1).transfer(user2.address, amountToSendBN);\nconst expectedBalanceOfUser2 = await debitFee(token, amountToSendBN);\nexpect((await token.balanceOf(user2.address)).eq(expectedBalanceOfUser2)).is.true;",
                  "err": {},
                  "uuid": "e6c5f179-fb44-4cc3-99e8-e5871b45ffe8",
                  "parentUUID": "3c074783-8461-4e01-bec4-536a23658bd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Event emitted when tokens are transferred",
                  "fullTitle": "LINGO Token Transfer Event emitted when tokens are transferred",
                  "timedOut": false,
                  "duration": 31,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountToSendBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait expect(token.transfer(user1.address, amountToSendBN))\n  .to.emit(token, 'Transfer')\n  .withArgs(owner.address, user1.address, amountToSendBN);",
                  "err": {},
                  "uuid": "3d6cdec5-5a69-4c61-8155-f994c130d9e0",
                  "parentUUID": "3c074783-8461-4e01-bec4-536a23658bd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts if user tries to transfer tokens without enough balance",
                  "fullTitle": "LINGO Token Transfer Reverts if user tries to transfer tokens without enough balance",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountToSendBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nawait expect(\n  token.connect(user3).transfer(user2.address, amountToSendBN)\n).to.be.revertedWith('ERC20: transfer amount exceeds balance');",
                  "err": {},
                  "uuid": "d703e491-7f31-41b0-a3e9-2a2c84ac62cf",
                  "parentUUID": "3c074783-8461-4e01-bec4-536a23658bd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts if user tries to transfer tokens to zero address",
                  "fullTitle": "LINGO Token Transfer Reverts if user tries to transfer tokens to zero address",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountToSendBN = BN(10).mul(BN(10).pow(DECIMALS_BN));\nawait expect(token.transfer(ZERO_ADDRESS, amountToSendBN)).to.be.revertedWith(\n  'ERC20: transfer to the zero address'\n);",
                  "err": {},
                  "uuid": "3df35851-7300-4c7d-84aa-27cd2ef198b5",
                  "parentUUID": "3c074783-8461-4e01-bec4-536a23658bd6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4d1c285b-69f2-4ce9-aa09-217ea4a6a10b",
                "e6c5f179-fb44-4cc3-99e8-e5871b45ffe8",
                "3d6cdec5-5a69-4c61-8155-f994c130d9e0",
                "d703e491-7f31-41b0-a3e9-2a2c84ac62cf",
                "3df35851-7300-4c7d-84aa-27cd2ef198b5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 103,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "cf02d766-ad44-4d2c-94b5-46c86e2eeebf",
              "title": "Allowance",
              "fullFile": "C:\\Users\\prasa\\Documents\\CODE\\Accubits\\lingo-token\\test\\lingoTokenContract.js",
              "file": "\\test\\lingoTokenContract.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Users can check their allowance",
                  "fullTitle": "LINGO Token Allowance Users can check their allowance",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect((await token.allowance(owner.address, user1.address)).eq(BN(0)));\nconst amountToSendBN = BN(1000).mul(BN(10).pow(DECIMALS_BN));\n//approving allowance\nawait token.approve(user1.address, amountToSendBN);\n//checking allowance\nexpect((await token.allowance(owner.address, user1.address)).eq(amountToSendBN));",
                  "err": {},
                  "uuid": "e0f15c96-02a8-4a05-99bc-8b42fc1e79d0",
                  "parentUUID": "cf02d766-ad44-4d2c-94b5-46c86e2eeebf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Approve transfer of available tokens by third-party",
                  "fullTitle": "LINGO Token Allowance Approve transfer of available tokens by third-party",
                  "timedOut": false,
                  "duration": 51,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountToSendBN = BN(1000).mul(BN(10).pow(DECIMALS_BN));\nconst balanceOfOwner = await token.balanceOf(owner.address);\nconst balanceOfUser1 = await token.balanceOf(user1.address);\nconst balanceOfUser2 = await token.balanceOf(user2.address);\n//approving allowance\nawait token.approve(user1.address, amountToSendBN);\n//checking allowance\nexpect((await token.allowance(owner.address, user1.address)).eq(amountToSendBN));\n//verifying transaction of approved tokens\nawait token.connect(user1).transferFrom(owner.address, user2.address, amountToSendBN);\nexpect((await token.balanceOf(owner.address)).eq(balanceOfOwner.sub(amountToSendBN)));\nexpect((await token.balanceOf(user1.address)).eq(balanceOfUser1));\nexpect((await token.balanceOf(user2.address)).eq(balanceOfUser2.add(amountToSendBN)));",
                  "err": {},
                  "uuid": "beba7029-d147-4fd6-a56d-08f8dd6b1bf1",
                  "parentUUID": "cf02d766-ad44-4d2c-94b5-46c86e2eeebf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Event emitted someone approves transfer of available tokens by third-party",
                  "fullTitle": "LINGO Token Allowance Event emitted someone approves transfer of available tokens by third-party",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountToSendBN = BN(1000).mul(BN(10).pow(DECIMALS_BN));\nawait expect(token.approve(user1.address, amountToSendBN))\n  .to.emit(token, 'Approval')\n  .withArgs(owner.address, user1.address, amountToSendBN);",
                  "err": {},
                  "uuid": "205f9e54-f643-412a-99ef-7eecc9332664",
                  "parentUUID": "cf02d766-ad44-4d2c-94b5-46c86e2eeebf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Increase allowance",
                  "fullTitle": "LINGO Token Allowance Increase allowance",
                  "timedOut": false,
                  "duration": 27,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountToSendBN = BN(1000).mul(BN(10).pow(DECIMALS_BN));\nconst increasedAmountBN = BN(500).mul(BN(10).pow(DECIMALS_BN));\nawait token.approve(user1.address, amountToSendBN);\nexpect((await token.allowance(owner.address, user1.address)).eq(amountToSendBN));\nawait token.increaseAllowance(user1.address, increasedAmountBN);\nexpect(\n  (await token.allowance(owner.address, user1.address)).eq(\n    amountToSendBN.add(increasedAmountBN)\n  )\n);",
                  "err": {},
                  "uuid": "da79c999-3414-4bae-a3e0-9876f6db9ea9",
                  "parentUUID": "cf02d766-ad44-4d2c-94b5-46c86e2eeebf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Decrease allowance",
                  "fullTitle": "LINGO Token Allowance Decrease allowance",
                  "timedOut": false,
                  "duration": 27,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountToSendBN = BN(1000).mul(BN(10).pow(DECIMALS_BN));\nconst increasedAmountBN = BN(500).mul(BN(10).pow(DECIMALS_BN));\nawait token.approve(user1.address, amountToSendBN);\nexpect((await token.allowance(owner.address, user1.address)).eq(amountToSendBN));\nawait token.increaseAllowance(user1.address, increasedAmountBN);\nexpect(\n  (await token.allowance(owner.address, user1.address)).eq(\n    amountToSendBN.sub(increasedAmountBN)\n  )\n);",
                  "err": {},
                  "uuid": "aaa280af-8d8b-44f7-8a35-2046b4030519",
                  "parentUUID": "cf02d766-ad44-4d2c-94b5-46c86e2eeebf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Revert when trying to approve unavailable tokens by third-party",
                  "fullTitle": "LINGO Token Allowance Revert when trying to approve unavailable tokens by third-party",
                  "timedOut": false,
                  "duration": 29,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountToSendBN = BN(1000).mul(BN(10).pow(DECIMALS_BN));\n//approving allowance\nawait token.connect(user1).approve(user2.address, amountToSendBN);\n//checking allowance\nexpect((await token.allowance(user1.address, user2.address)).eq(amountToSendBN));\n//verifying transaction of approved tokens\nawait expect(\n  token.connect(user2).transferFrom(user1.address, user3.address, amountToSendBN)\n).to.be.revertedWith('ERC20: transfer amount exceeds balance');",
                  "err": {},
                  "uuid": "b9e906f1-f57f-4ad6-8e15-06da0f68e08a",
                  "parentUUID": "cf02d766-ad44-4d2c-94b5-46c86e2eeebf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Revert when trying to transfer more than allowed tokens by third-party",
                  "fullTitle": "LINGO Token Allowance Revert when trying to transfer more than allowed tokens by third-party",
                  "timedOut": false,
                  "duration": 27,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountToSendBN = BN(1000).mul(BN(10).pow(DECIMALS_BN));\n//approving allowance\nawait token.approve(user1.address, amountToSendBN);\n//checking allowance\nexpect((await token.allowance(owner.address, user1.address)).eq(amountToSendBN));\n//verifying transaction of approved tokens\nawait expect(\n  token\n    .connect(user1)\n    .transferFrom(owner.address, user2.address, amountToSendBN.add(BN(1000)))\n).to.be.revertedWith('ERC20: insufficient allowance');",
                  "err": {},
                  "uuid": "33b08eda-22d5-4948-bd4f-d9c20b5140e6",
                  "parentUUID": "cf02d766-ad44-4d2c-94b5-46c86e2eeebf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e0f15c96-02a8-4a05-99bc-8b42fc1e79d0",
                "beba7029-d147-4fd6-a56d-08f8dd6b1bf1",
                "205f9e54-f643-412a-99ef-7eecc9332664",
                "da79c999-3414-4bae-a3e0-9876f6db9ea9",
                "aaa280af-8d8b-44f7-8a35-2046b4030519",
                "b9e906f1-f57f-4ad6-8e15-06da0f68e08a",
                "33b08eda-22d5-4948-bd4f-d9c20b5140e6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 194,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "cc6bdde6-4223-419c-b2a0-3c0d8b76f2e0",
              "title": "Ownership",
              "fullFile": "C:\\Users\\prasa\\Documents\\CODE\\Accubits\\lingo-token\\test\\lingoTokenContract.js",
              "file": "\\test\\lingoTokenContract.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Transferring ownership",
                  "fullTitle": "LINGO Token Ownership Transferring ownership",
                  "timedOut": false,
                  "duration": 27,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await token.transferOwnership(user1.address);\nexpect(await token.owner()).to.equal(user1.address);",
                  "err": {},
                  "uuid": "7d6d5379-3402-4a65-a0de-4a8dd71696eb",
                  "parentUUID": "cc6bdde6-4223-419c-b2a0-3c0d8b76f2e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Event emitted on transferring ownership",
                  "fullTitle": "LINGO Token Ownership Event emitted on transferring ownership",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await expect(token.transferOwnership(user1.address))\n  .to.emit(token, 'OwnershipTransferred')\n  .withArgs(owner.address, user1.address);",
                  "err": {},
                  "uuid": "ea20dda3-bbcd-44dc-8a39-4b4b5ce59abf",
                  "parentUUID": "cc6bdde6-4223-419c-b2a0-3c0d8b76f2e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Revert when some user other than owner tries to transfer ownership",
                  "fullTitle": "LINGO Token Ownership Revert when some user other than owner tries to transfer ownership",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await expect(token.connect(user2).transferOwnership(user1.address)).to.be.revertedWith(\n  'Ownable: caller is not the owner'\n);",
                  "err": {},
                  "uuid": "d5aaee4b-97b1-4474-b5fb-4a87c8832740",
                  "parentUUID": "cc6bdde6-4223-419c-b2a0-3c0d8b76f2e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Renounce ownership",
                  "fullTitle": "LINGO Token Ownership Renounce ownership",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await token.renounceOwnership();\nexpect(await token.owner()).to.not.equal(owner.address);",
                  "err": {},
                  "uuid": "2f46ed34-0f23-436d-ab6a-ea738e7a3ee2",
                  "parentUUID": "cc6bdde6-4223-419c-b2a0-3c0d8b76f2e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Revert when some user other than owner tries to renounce ownership",
                  "fullTitle": "LINGO Token Ownership Revert when some user other than owner tries to renounce ownership",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await expect(token.connect(user2).renounceOwnership()).to.be.revertedWith(\n  'Ownable: caller is not the owner'\n);",
                  "err": {},
                  "uuid": "83e2cba5-3b30-4fbf-adc2-9e2b8760f398",
                  "parentUUID": "cc6bdde6-4223-419c-b2a0-3c0d8b76f2e0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7d6d5379-3402-4a65-a0de-4a8dd71696eb",
                "ea20dda3-bbcd-44dc-8a39-4b4b5ce59abf",
                "d5aaee4b-97b1-4474-b5fb-4a87c8832740",
                "2f46ed34-0f23-436d-ab6a-ea738e7a3ee2",
                "83e2cba5-3b30-4fbf-adc2-9e2b8760f398"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 82,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "cf84ee0a-c1b3-4cad-89c3-e55b5bdd704a",
              "title": "Mint",
              "fullFile": "C:\\Users\\prasa\\Documents\\CODE\\Accubits\\lingo-token\\test\\lingoTokenContract.js",
              "file": "\\test\\lingoTokenContract.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Owner can mint tokens",
                  "fullTitle": "LINGO Token Mint Owner can mint tokens",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountToMintBN = BN(500).mul(BN(10).pow(DECIMALS_BN));\nconst ownerInitBalanceBN = await token.balanceOf(owner.address);\nawait token.mint(owner.address, amountToMintBN);\nexpect((await token.balanceOf(owner.address)).eq(ownerInitBalanceBN.add(amountToMintBN))).is\n  .true;",
                  "err": {},
                  "uuid": "fb457206-1d6f-4755-9a7c-56f357c50a97",
                  "parentUUID": "cf84ee0a-c1b3-4cad-89c3-e55b5bdd704a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts when non owner tries to mint tokens",
                  "fullTitle": "LINGO Token Mint Reverts when non owner tries to mint tokens",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountToMintBN = BN(500).mul(BN(10).pow(DECIMALS_BN));\nawait expect(token.connect(user1).mint(owner.address, amountToMintBN)).to.be.revertedWith(\n  'Ownable: caller is not the owner'\n);",
                  "err": {},
                  "uuid": "d12bf137-9fdc-4917-876d-38e89145857f",
                  "parentUUID": "cf84ee0a-c1b3-4cad-89c3-e55b5bdd704a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fb457206-1d6f-4755-9a7c-56f357c50a97",
                "d12bf137-9fdc-4917-876d-38e89145857f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 41,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "e2756e81-5468-4117-b4c8-68f7266a0c44",
              "title": "Burn",
              "fullFile": "C:\\Users\\prasa\\Documents\\CODE\\Accubits\\lingo-token\\test\\lingoTokenContract.js",
              "file": "\\test\\lingoTokenContract.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Users can burn their own tokens",
                  "fullTitle": "LINGO Token Burn Users can burn their own tokens",
                  "timedOut": false,
                  "duration": 34,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountToBurnBN = BN(500).mul(BN(10).pow(DECIMALS_BN));\nconst ownerInitBalanceBN = await token.balanceOf(owner.address);\nawait token.burn(amountToBurnBN);\nexpect((await token.balanceOf(owner.address)).eq(ownerInitBalanceBN.sub(amountToBurnBN))).is\n  .true;",
                  "err": {},
                  "uuid": "6a0d5c6f-4ecf-4aad-b0a5-ea507bf45305",
                  "parentUUID": "e2756e81-5468-4117-b4c8-68f7266a0c44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts when users tries to burn unavailable tokens",
                  "fullTitle": "LINGO Token Burn Reverts when users tries to burn unavailable tokens",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountToBurnBN = BN(500).mul(BN(10).pow(DECIMALS_BN));\nawait expect(token.connect(user1).burn(amountToBurnBN)).to.be.revertedWith(\n  'ERC20: burn amount exceeds balance'\n);",
                  "err": {},
                  "uuid": "ecce2150-6d49-4dc7-9d52-32af58a837e1",
                  "parentUUID": "e2756e81-5468-4117-b4c8-68f7266a0c44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Users can burn allowed tokens from another user",
                  "fullTitle": "LINGO Token Burn Users can burn allowed tokens from another user",
                  "timedOut": false,
                  "duration": 29,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const allowanceAmountBN = BN(1000).mul(BN(10).pow(DECIMALS_BN));\nconst amountToBurnBN = BN(500).mul(BN(10).pow(DECIMALS_BN));\nconst ownerInitBalanceBN = await token.balanceOf(owner.address);\nawait token.approve(user1.address, allowanceAmountBN);\nexpect((await token.allowance(owner.address, user1.address)).eq(allowanceAmountBN));\nawait token.connect(user1).burnFrom(owner.address, amountToBurnBN);\nexpect((await token.balanceOf(owner.address)).eq(ownerInitBalanceBN.sub(amountToBurnBN))).is\n  .true;\nexpect(\n  (await token.allowance(owner.address, user1.address)).eq(\n    allowanceAmountBN.sub(amountToBurnBN)\n  )\n);",
                  "err": {},
                  "uuid": "728698e7-cce4-4177-88b8-95feddb9e1df",
                  "parentUUID": "e2756e81-5468-4117-b4c8-68f7266a0c44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts when users tries to burn tokens more than allowed",
                  "fullTitle": "LINGO Token Burn Reverts when users tries to burn tokens more than allowed",
                  "timedOut": false,
                  "duration": 29,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const allowanceAmountBN = BN(500).mul(BN(10).pow(DECIMALS_BN));\nconst amountToBurnBN = BN(1000).mul(BN(10).pow(DECIMALS_BN));\nawait token.approve(user1.address, allowanceAmountBN);\nexpect((await token.allowance(owner.address, user1.address)).eq(allowanceAmountBN));\nawait expect(\n  token.connect(user1).burnFrom(owner.address, amountToBurnBN)\n).to.be.revertedWith('ERC20: insufficient allowance');",
                  "err": {},
                  "uuid": "04bcb519-d81b-4eb4-8834-3b378be1e7f0",
                  "parentUUID": "e2756e81-5468-4117-b4c8-68f7266a0c44",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6a0d5c6f-4ecf-4aad-b0a5-ea507bf45305",
                "ecce2150-6d49-4dc7-9d52-32af58a837e1",
                "728698e7-cce4-4177-88b8-95feddb9e1df",
                "04bcb519-d81b-4eb4-8834-3b378be1e7f0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 100,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "24ec9269-45b9-4bf4-805a-6198a74d3bbe",
              "title": "Transaction Fee",
              "fullFile": "C:\\Users\\prasa\\Documents\\CODE\\Accubits\\lingo-token\\test\\lingoTokenContract.js",
              "file": "\\test\\lingoTokenContract.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Anyone can read current fee percentage",
                  "fullTitle": "LINGO Token Transaction Fee Anyone can read current fee percentage",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect((await token.getTransferFee()).eq(FEE_BN)).is.true;",
                  "err": {},
                  "uuid": "309e282d-c504-42d6-abb3-90b50ad803ef",
                  "parentUUID": "24ec9269-45b9-4bf4-805a-6198a74d3bbe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Owner can update fee percentage",
                  "fullTitle": "LINGO Token Transaction Fee Owner can update fee percentage",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect((await token.getTransferFee()).eq(FEE_BN)).is.true;\nconst NEW_FEE = BN(200);\nawait token.setTransferFee(NEW_FEE);\nexpect((await token.getTransferFee()).eq(NEW_FEE)).is.true;",
                  "err": {},
                  "uuid": "6eb41a49-66b8-4614-a7bf-227eeba02c69",
                  "parentUUID": "24ec9269-45b9-4bf4-805a-6198a74d3bbe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Event emitted when fee percentage updated",
                  "fullTitle": "LINGO Token Transaction Fee Event emitted when fee percentage updated",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const NEW_FEE = BN(200);\nawait expect(token.setTransferFee(NEW_FEE))\n  .to.emit(token, 'TransferFeeUpdated')\n  .withArgs(NEW_FEE);",
                  "err": {},
                  "uuid": "7ab88cb3-418c-4efa-b2bf-3bd2ea6eba32",
                  "parentUUID": "24ec9269-45b9-4bf4-805a-6198a74d3bbe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts when non owner tries to update fee percentage",
                  "fullTitle": "LINGO Token Transaction Fee Reverts when non owner tries to update fee percentage",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const NEW_FEE = BN(200);\nawait expect(token.connect(user1).setTransferFee(NEW_FEE)).to.be.revertedWith(\n  'Ownable: caller is not the owner'\n);",
                  "err": {},
                  "uuid": "864f38bb-ec39-427e-bbbe-e9c1142f6b47",
                  "parentUUID": "24ec9269-45b9-4bf4-805a-6198a74d3bbe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts when tries to update fee percentage outside the limit 0% - 5%",
                  "fullTitle": "LINGO Token Transaction Fee Reverts when tries to update fee percentage outside the limit 0% - 5%",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const NEW_FEE = BN(600);\nawait expect(token.setTransferFee(NEW_FEE)).to.be.revertedWith(\n  'LINGO: Transfer Fee should be between 0% - 5%'\n);",
                  "err": {},
                  "uuid": "739c1e00-d16b-4667-93b6-d6bb7fde54aa",
                  "parentUUID": "24ec9269-45b9-4bf4-805a-6198a74d3bbe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "309e282d-c504-42d6-abb3-90b50ad803ef",
                "6eb41a49-66b8-4614-a7bf-227eeba02c69",
                "7ab88cb3-418c-4efa-b2bf-3bd2ea6eba32",
                "864f38bb-ec39-427e-bbbe-e9c1142f6b47",
                "739c1e00-d16b-4667-93b6-d6bb7fde54aa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 85,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "5f8936a8-7178-457f-96df-23986be9f4e7",
              "title": "Treasury Wallet",
              "fullFile": "C:\\Users\\prasa\\Documents\\CODE\\Accubits\\lingo-token\\test\\lingoTokenContract.js",
              "file": "\\test\\lingoTokenContract.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Owner can read current treasury wallet",
                  "fullTitle": "LINGO Token Treasury Wallet Owner can read current treasury wallet",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await token.getTreasuryWalletAddress()).equals(treasuryWallet.address);",
                  "err": {},
                  "uuid": "8b30028a-a76f-4900-aabe-99cb2c1db325",
                  "parentUUID": "5f8936a8-7178-457f-96df-23986be9f4e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Owner can update treasury wallet",
                  "fullTitle": "LINGO Token Treasury Wallet Owner can update treasury wallet",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await token.setTreasuryWalletAddress(user3.address);\nexpect(await token.getTreasuryWalletAddress()).equals(user3.address);",
                  "err": {},
                  "uuid": "f1282a5f-7fcf-4101-a890-5b2facdc86e5",
                  "parentUUID": "5f8936a8-7178-457f-96df-23986be9f4e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Event emitted when treasury wallet updated",
                  "fullTitle": "LINGO Token Treasury Wallet Event emitted when treasury wallet updated",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await expect(token.setTreasuryWalletAddress(user3.address))\n  .to.emit(token, 'TreasuryWalletUpdated')\n  .withArgs(user3.address);",
                  "err": {},
                  "uuid": "3c93d3f0-4d43-41ad-8e6e-197a4bc345d4",
                  "parentUUID": "5f8936a8-7178-457f-96df-23986be9f4e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fee is debited and sent to treasury wallet on transactions",
                  "fullTitle": "LINGO Token Treasury Wallet Fee is debited and sent to treasury wallet on transactions",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountToSendBN = BN(100).mul(BN(10).pow(DECIMALS_BN));\nexpect((await token.balanceOf(treasuryWallet.address)).eq(BN(0))).is.true;\n//admin to user1.address\nawait token.transfer(user1.address, amountToSendBN);\nexpect((await token.balanceOf(user1.address)).eq(amountToSendBN)).is.true;\n//user1.address to user2.address\nawait token.connect(user1).transfer(user2.address, amountToSendBN);\nconst expectedBalanceOfUser2 = await debitFee(token, amountToSendBN);\nexpect((await token.balanceOf(user2.address)).eq(expectedBalanceOfUser2)).is.true;\nconst fee = amountToSendBN.sub(expectedBalanceOfUser2);\nexpect((await token.balanceOf(treasuryWallet.address)).eq(fee)).is.true;",
                  "err": {},
                  "uuid": "69d703de-0389-41d9-82fa-8df9f02bc13c",
                  "parentUUID": "5f8936a8-7178-457f-96df-23986be9f4e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts when non owner tries to update treasury wallet",
                  "fullTitle": "LINGO Token Treasury Wallet Reverts when non owner tries to update treasury wallet",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await expect(\n  token.connect(user1).setTreasuryWalletAddress(user3.address)\n).to.be.revertedWith('Ownable: caller is not the owner');",
                  "err": {},
                  "uuid": "d8f950a9-3176-4174-a34d-ce9c0358a4c1",
                  "parentUUID": "5f8936a8-7178-457f-96df-23986be9f4e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Reverts when owner tries to update treasury wallet with zero address  `",
                  "fullTitle": "LINGO Token Treasury Wallet Reverts when owner tries to update treasury wallet with zero address  `",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await expect(token.setTreasuryWalletAddress(ZERO_ADDRESS)).to.be.revertedWith(\n  'LINGO: Zero Address'\n);",
                  "err": {},
                  "uuid": "a87f8a35-7924-46eb-b9f8-242960a084b5",
                  "parentUUID": "5f8936a8-7178-457f-96df-23986be9f4e7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8b30028a-a76f-4900-aabe-99cb2c1db325",
                "f1282a5f-7fcf-4101-a890-5b2facdc86e5",
                "3c93d3f0-4d43-41ad-8e6e-197a4bc345d4",
                "69d703de-0389-41d9-82fa-8df9f02bc13c",
                "d8f950a9-3176-4174-a34d-ce9c0358a4c1",
                "a87f8a35-7924-46eb-b9f8-242960a084b5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 123,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "db1251cb-ac39-4de0-9445-3a036753a19d",
              "title": "Whitelisting",
              "fullFile": "C:\\Users\\prasa\\Documents\\CODE\\Accubits\\lingo-token\\test\\lingoTokenContract.js",
              "file": "\\test\\lingoTokenContract.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Owner address, Contract address and Treasury wallet address are included in internal whitelist by default",
                  "fullTitle": "LINGO Token Whitelisting Owner address, Contract address and Treasury wallet address are included in internal whitelist by default",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await token.isInternalWhiteListed(owner.address)).to.be.true;\nexpect(await token.isInternalWhiteListed(token.address)).to.be.true;\nexpect(await token.isInternalWhiteListed(treasuryWallet.address)).to.be.true;",
                  "err": {},
                  "uuid": "e0d97936-1f79-4ad4-938e-96874cc28641",
                  "parentUUID": "db1251cb-ac39-4de0-9445-3a036753a19d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Owner can add accounts to both whitelists",
                  "fullTitle": "LINGO Token Whitelisting Owner can add accounts to both whitelists",
                  "timedOut": false,
                  "duration": 40,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await token.isExternalWhiteListed(user1.address)).to.be.false;\nawait token.addToWhiteList(0, [user1.address]);\nexpect(await token.isExternalWhiteListed(user1.address)).to.be.true;\nexpect(await token.isInternalWhiteListed(user1.address)).to.be.false;\nawait token.addToWhiteList(1, [user1.address]);\nexpect(await token.isInternalWhiteListed(user1.address)).to.be.true;",
                  "err": {},
                  "uuid": "6cfae9ea-7cef-492c-affc-96630e25c1cd",
                  "parentUUID": "db1251cb-ac39-4de0-9445-3a036753a19d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Owner can remove accounts from whitelists",
                  "fullTitle": "LINGO Token Whitelisting Owner can remove accounts from whitelists",
                  "timedOut": false,
                  "duration": 59,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await token.addToWhiteList(0, [user1.address]);\nexpect(await token.isExternalWhiteListed(user1.address)).to.be.true;\nawait token.removeFromWhiteList(0, [user1.address]);\nexpect(await token.isExternalWhiteListed(user1.address)).to.be.false;\nawait token.addToWhiteList(1, [user1.address]);\nexpect(await token.isInternalWhiteListed(user1.address)).to.be.true;\nawait token.removeFromWhiteList(1, [user1.address]);\nexpect(await token.isInternalWhiteListed(user1.address)).to.be.false;",
                  "err": {},
                  "uuid": "6eb83cb2-a335-4406-a2db-ec8c614ea07a",
                  "parentUUID": "db1251cb-ac39-4de0-9445-3a036753a19d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Users can check an account is whitelisted or not",
                  "fullTitle": "LINGO Token Whitelisting Users can check an account is whitelisted or not",
                  "timedOut": false,
                  "duration": 36,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await token.isExternalWhiteListed(user1.address)).to.be.false;\nawait token.addToWhiteList(0, [user1.address]);\nexpect(await token.isExternalWhiteListed(user1.address)).to.be.true;\nexpect(await token.isInternalWhiteListed(user1.address)).to.be.false;\nawait token.addToWhiteList(1, [user1.address]);\nexpect(await token.isInternalWhiteListed(user1.address)).to.be.true;",
                  "err": {},
                  "uuid": "1818607e-a037-4a76-b2f0-9a0e966cd0b8",
                  "parentUUID": "db1251cb-ac39-4de0-9445-3a036753a19d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Users can read whitelisted accounts",
                  "fullTitle": "LINGO Token Whitelisting Users can read whitelisted accounts",
                  "timedOut": false,
                  "duration": 32,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await token.isExternalWhiteListed(user1.address)).to.be.false;\nawait token.addToWhiteList(0, [user1.address]);\nconst externalWhiteList = await token.getExternalWhitelistedAddresses();\nexpect(_.isEqual(externalWhiteList, [user1.address])).to.be.true;\nexpect(await token.isInternalWhiteListed(user1.address)).to.be.false;\nawait token.addToWhiteList(1, [user1.address]);\nconst internalWhiteList = await token.getInternalWhitelistedAddresses();\nexpect(\n  _.isEqual(internalWhiteList, [\n    owner.address,\n    token.address,\n    treasuryWallet.address,\n    user1.address,\n  ])\n).to.be.true;",
                  "err": {},
                  "uuid": "7aa1972a-fab6-4f17-9dee-11c58a6e506c",
                  "parentUUID": "db1251cb-ac39-4de0-9445-3a036753a19d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fee is not debited if token transferred from or to an internal whitelisted account",
                  "fullTitle": "LINGO Token Whitelisting Fee is not debited if token transferred from or to an internal whitelisted account",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountToSendBN = BN(10).mul(BN(10).pow(DECIMALS_BN));\nexpect(await token.isInternalWhiteListed(owner.address)).to.be.true;\n//From internal whitelisted account\nawait expect(token.transfer(user1.address, amountToSendBN))\n  .to.emit(token, 'Transfer')\n  .withArgs(owner.address, user1.address, amountToSendBN);\nexpect((await token.balanceOf(user1.address)).eq(amountToSendBN)).is.true;\n//To internal whitelisted account\nconst balanceOfOwner = await token.balanceOf(owner.address);\nawait expect(token.connect(user1).transfer(owner.address, amountToSendBN))\n  .to.emit(token, 'Transfer')\n  .withArgs(user1.address, owner.address, amountToSendBN);\nexpect((await token.balanceOf(owner.address)).eq(balanceOfOwner.add(amountToSendBN))).is\n  .true;",
                  "err": {},
                  "uuid": "de3f0376-cfcc-4599-b892-7ab99664129a",
                  "parentUUID": "db1251cb-ac39-4de0-9445-3a036753a19d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fee is not debited if token transferred to an external whitelisted account",
                  "fullTitle": "LINGO Token Whitelisting Fee is not debited if token transferred to an external whitelisted account",
                  "timedOut": false,
                  "duration": 55,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountToSendBN = BN(10).mul(BN(10).pow(DECIMALS_BN));\nawait token.addToWhiteList(0, [user2.address]);\nexpect(await token.isInternalWhiteListed(user1.address)).to.be.false;\nexpect(await token.isInternalWhiteListed(user2.address)).to.be.false;\nexpect(await token.isExternalWhiteListed(user1.address)).to.be.false;\nexpect(await token.isExternalWhiteListed(user2.address)).to.be.true;\ntoken.transfer(user1.address, amountToSendBN);\n//To external whitelisted account\nawait expect(token.connect(user1).transfer(user2.address, amountToSendBN))\n  .to.emit(token, 'Transfer')\n  .withArgs(user1.address, user2.address, amountToSendBN);\nexpect((await token.balanceOf(user2.address)).eq(amountToSendBN)).is.true;",
                  "err": {},
                  "uuid": "4690112f-11c5-48b2-8da6-a3b939c9092c",
                  "parentUUID": "db1251cb-ac39-4de0-9445-3a036753a19d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fee is debited if token transferred from an external whitelisted account",
                  "fullTitle": "LINGO Token Whitelisting Fee is debited if token transferred from an external whitelisted account",
                  "timedOut": false,
                  "duration": 54,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountToSendBN = BN(10).mul(BN(10).pow(DECIMALS_BN));\nawait token.addToWhiteList(0, [user1.address]);\nexpect(await token.isInternalWhiteListed(user1.address)).to.be.false;\nexpect(await token.isInternalWhiteListed(user2.address)).to.be.false;\nexpect(await token.isExternalWhiteListed(user1.address)).to.be.true;\nexpect(await token.isExternalWhiteListed(user2.address)).to.be.false;\ntoken.transfer(user1.address, amountToSendBN);\n//From external whitelisted account\nconst expectedBalanceOfUser2 = await debitFee(token, amountToSendBN);\nawait expect(token.connect(user1).transfer(user2.address, amountToSendBN))\n  .to.emit(token, 'Transfer')\n  .withArgs(user1.address, user2.address, expectedBalanceOfUser2);\nexpect((await token.balanceOf(user2.address)).eq(expectedBalanceOfUser2)).is.true;",
                  "err": {},
                  "uuid": "51a1a601-8b1e-42b8-a3f2-fbe6c3874f47",
                  "parentUUID": "db1251cb-ac39-4de0-9445-3a036753a19d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fee is debited for all other transactions",
                  "fullTitle": "LINGO Token Whitelisting Fee is debited for all other transactions",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const amountToSendBN = BN(10).mul(BN(10).pow(DECIMALS_BN));\nexpect(await token.isInternalWhiteListed(user1.address)).to.be.false;\nexpect(await token.isInternalWhiteListed(user2.address)).to.be.false;\nexpect(await token.isExternalWhiteListed(user1.address)).to.be.false;\nexpect(await token.isExternalWhiteListed(user2.address)).to.be.false;\ntoken.transfer(user1.address, amountToSendBN);\n//From external whitelisted account\nconst expectedBalanceOfUser2 = await debitFee(token, amountToSendBN);\nawait expect(token.connect(user1).transfer(user2.address, amountToSendBN))\n  .to.emit(token, 'Transfer')\n  .withArgs(user1.address, user2.address, expectedBalanceOfUser2);\nexpect((await token.balanceOf(user2.address)).eq(expectedBalanceOfUser2)).is.true;",
                  "err": {},
                  "uuid": "647c19a0-f309-4120-a41f-d74a537c08ae",
                  "parentUUID": "db1251cb-ac39-4de0-9445-3a036753a19d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e0d97936-1f79-4ad4-938e-96874cc28641",
                "6cfae9ea-7cef-492c-affc-96630e25c1cd",
                "6eb83cb2-a335-4406-a2db-ec8c614ea07a",
                "1818607e-a037-4a76-b2f0-9a0e966cd0b8",
                "7aa1972a-fab6-4f17-9dee-11c58a6e506c",
                "de3f0376-cfcc-4599-b892-7ab99664129a",
                "4690112f-11c5-48b2-8da6-a3b939c9092c",
                "51a1a601-8b1e-42b8-a3f2-fbe6c3874f47",
                "647c19a0-f309-4120-a41f-d74a537c08ae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 391,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 60000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": " 'Lingo-Token-Test-Report'",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": " 'Lingo-Token-Test-Report'",
        "quiet": " true"
      },
      "version": "6.2.0"
    }
  }
}